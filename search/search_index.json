{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C\u8bed\u8a00\u9ad8\u7ea7\u6280\u5de7 C\u8bed\u8a00\u7b80\u4ecb \u200cC\u8bed\u8a00\u662f\u4e00\u79cd\u9ad8\u6548\u3001\u7b80\u6d01\u3001\u7075\u6d3b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7cfb\u7edf\u8f6f\u4ef6\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3001\u6e38\u620f\u5f00\u53d1\u548c\u7f51\u7edc\u7f16\u7a0b\u7b49\u9886\u57df\u3002\u200c\u5b83\u7531Dennis Ritchie\u57281972\u5e74\u8bbe\u8ba1\uff0c\u6700\u521d\u662f\u4e3a\u4e86\u5f00\u53d1UNIX\u64cd\u4f5c\u7cfb\u7edf\u800c\u521b\u5efa\u7684\u3002C\u8bed\u8a00\u5177\u6709\u9ad8\u6548\u6027\uff0c\u80fd\u591f\u76f4\u63a5\u64cd\u4f5c\u5185\u5b58\uff0c\u751f\u6210\u9ad8\u6548\u7684\u673a\u5668\u7801\uff0c\u540c\u65f6\u5176\u8bed\u6cd5\u7b80\u5355\uff0c\u6613\u4e8e\u5b66\u4e60\u548c\u4f7f\u7528\u3002\u200c C\u8bed\u8a00\u4f18\u52bf \u9ad8\u6548\u6027\uff1aC\u8bed\u8a00\u8bbe\u8ba1\u7b80\u6d01\uff0c\u6267\u884c\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6\u8d44\u6e90\u3002 \u53ef\u79fb\u690d\u6027\uff1aC\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u8fd0\u884c\uff0c\u5177\u6709\u826f\u597d\u7684\u53ef\u79fb\u690d\u6027\u3002 C\u8bed\u8a00\u662f\u53ef\u79fb\u690d\u6027\u6700\u5f3a\u7684\u8bed\u8a00\uff0c\u51e0\u4e4e\u6ca1\u6709C\u8bed\u8a00\u4e0d\u80fd\u4f7f\u7528\u7684\u573a\u5408\uff0c\u53ea\u80fd\u8bf4\u5728\u67d0\u4e9b\u573a\u5408\u4e0d\u662f\u6700\u4f73\u9009\u62e9\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u573a\u5408\u5374\u662f\u552f\u4e00\u9009\u62e9\u3002 \u8bed\u6cd5\u7b80\u5355\uff1a C\u8bed\u8a00\u7684\u8bed\u6cd5\u7ed3\u6784\u76f8\u5bf9\u7b80\u5355\uff0c\u53ea\u6709\u5c11\u6570\u51e0\u4e2a\u5173\u952e\u5b57 \uff0c\u6ca1\u6709\u5176\u4ed6\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90a3\u4e48\u591a\u7684\u8bed\u6cd5\u7cd6\u548c\u590d\u6742\u7684\u6982\u5ff5\u3002\u5bf9\u4e8e\u96f6\u57fa\u7840\u7684\u5b66\u4e60\u8005\u6765\u8bf4,\u53ea\u8981\u638c\u63e1\u4e86\u57fa\u672c\u7684\u8bed\u6cd5\u89c4\u5219\u548c\u4e00\u4e9b\u5e38\u7528\u7684\u51fd\u6570,\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u5199\u7b80\u5355\u7684C\u7a0b\u5e8f\u3002 \u529f\u80fd\u5f3a\u5927\uff1aC\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6570\u636e\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26\uff0c\u652f\u6301\u7ed3\u6784\u5316\u7f16\u7a0b\uff0c\u80fd\u591f\u5b9e\u73b0\u590d\u6742\u7684\u7b97\u6cd5\u3002 \u7075\u6d3b\u6027\uff1aC\u8bed\u8a00\u5141\u8bb8\u5bf9\u5185\u5b58\u8fdb\u884c\u76f4\u63a5\u64cd\u4f5c\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7cbe\u7ec6\u63a7\u5236\u7a0b\u5e8f\u7684\u5185\u5b58\u4f7f\u7528\u3002\u8fd9\u4f7f\u5f97\u7a0b\u5e8f\u80fd\u591f\u9ad8\u6548\u5730\u4f7f\u7528\u5185\u5b58\u8d44\u6e90\uff0c\u5c24\u5176\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u4e2d\u5c24\u4e3a\u91cd\u8981\u200c\u3002 abi\u7a33\u5b9a: C\u8bed\u8a00\u81f3\u4eca\u4ecd\u7136\u662f\u5404\u8bed\u8a00\u4e4b\u95f4\u4ea4\u4e92\u7684\u57fa\u5e95\u8bed\u8a00\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0e\u5176\u5b83\u4efb\u4f55\u8bed\u8a00\u4ea4\u4e92\uff0c\u6682\u65f6\u65e0\u4efb\u4f55\u8bed\u8a00\u53ef\u4ee5\u53d6\u4ee3\u5b83\u7684\u4f4d\u7f6e\u200c\u3002 C\u8bed\u8a00\u52a3\u52bf \u200c\u5185\u5b58\u7ba1\u7406\u95ee\u9898\u200c\uff1aC\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u81ea\u52a8\u7684\u5185\u5b58\u7ba1\u7406\u673a\u5236\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u624b\u52a8\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\u548c\u6307\u9488\u9519\u8bef\uff0c\u589e\u52a0\u7a0b\u5e8f\u51fa\u9519\u7684\u6982\u7387\u200c \u7c7b\u578b\u5b89\u5168\u4e0d\u8db3\u200c\uff1aC\u8bed\u8a00\u7f3a\u4e4f\u7c7b\u578b\u5b89\u5168\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u7ba1\u7406\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u7c7b\u578b\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff0c\u589e\u52a0\u7a0b\u5e8f\u51fa\u9519\u7684\u98ce\u9669\u200c \u6307\u9488\u64cd\u4f5c\u590d\u6742\u200c\uff1aC\u8bed\u8a00\u7684\u6307\u9488\u64cd\u4f5c\u975e\u5e38\u590d\u6742\uff0c\u5bb9\u6613\u5bfc\u81f4\u6307\u9488\u9519\u8bef\u3002\u7a0b\u5e8f\u5458\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u5730\u4f7f\u7528\u6307\u9488\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f15\u53d1\u5404\u79cd\u95ee\u9898\u200c \u7f3a\u4e4f\u5f02\u5e38\u5904\u7406\u200c\uff1aC\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u5904\u7406\u5404\u79cd\u9519\u8bef\u60c5\u51b5\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u4e2d\u5145\u65a5\u7740\u5927\u91cf\u7684\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u5f71\u54cd\u4ee3\u7801\u7684\u6574\u6d01\u6027\u548c\u53ef\u8bfb\u6027\u200c \u4e0d\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\u200c\uff1aC\u8bed\u8a00\u4e0d\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\uff0c\u8fd9\u9650\u5236\u4e86\u5176\u5728\u67d0\u4e9b\u65b9\u9762\u7684\u5e94\u7528\u3002\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u7f16\u5199\u5927\u91cf\u7684\u6a21\u677f\u4ee3\u7801\uff0c\u589e\u52a0\u4e86\u5f00\u53d1\u6210\u672c\u200c \u7f3a\u4e4f\u6807\u51c6\u5e93\u652f\u6301\u200c\uff1aC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u652f\u6301\u6709\u9650\uff0c\u8bb8\u591a\u529f\u80fd\u9700\u8981\u7a0b\u5e8f\u5458\u81ea\u5df1\u5b9e\u73b0\u3002\u8fd9\u589e\u52a0\u4e86\u5f00\u53d1\u7684\u590d\u6742\u6027\uff0c\u964d\u4f4e\u4e86\u5f00\u53d1\u6548\u7387\u200c \u5176\u4e2d6\u662f\u75315\u5bfc\u81f4\u7684\uff0c\u800c\u672c\u4e66\u7684\u76ee\u7684\u6b63\u662f\u89e3\u51b34\uff0c5\uff0c6 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4f7f\u7528C++ C++\u7684\u5b66\u4e60\u7fa4\u4f53\u8fdc\u5c11\u4e8eC\u8bed\u8a00\u7684\u5b66\u4e60\u7fa4\u4f53\u3002 C++\u8bed\u6cd5\u590d\u6742\uff0c\u4f5c\u4e3a\u4e00\u95e8\u591a\u8303\u5f0f\u8bed\u8a00\uff0cC++\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u901a\u5e38\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5bfc\u81f4\u540c\u4e00\u56e2\u961f\u5199\u51fa\u6765\u7684\u4ee3\u7801\u53ef\u80fd\u98ce\u683c\u4e0d\u7edf\u4e00\uff0c\u96be\u4e8e\u7ef4\u62a4\u3002 C++\u7684\u7f16\u8bd1\u5668\u5f00\u53d1\u96be\u5ea6\u9ad8\uff0c\u5728\u5f88\u591a\u573a\u5408\u4e0b\uff0cC++\u7684\u7f16\u8bd1\u5668\u672c\u8eab\u662f\u6709BUG\u7684\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528C++\u3002 C++\u5728\u7279\u5b9a\u573a\u5408\u4e0b\u5e76\u4e0d\u80fd\u63a5\u8fd1\u6700\u4f18\u6027\u80fd\uff0c\u4f46\u662fC\u5f80\u5f80\u80fd\u3002 C++\u7684\u8bed\u6cd5\u4e0e\u8fd0\u884c\u65f6\u7ed1\u5b9a\uff0c\u6bd4\u5982new/detele\uff0crtti\u548cexception\u90fd\u662f\u4f9d\u8d56\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u8fd0\u884c\u65f6\u7684\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u975e\u5e38 \u8026\u5408 \u3002\u5982\u679c\u8fd0\u884c\u65f6\u5e93\u672c\u8eab\u6709BUG\uff0c\u5f00\u53d1\u8005\u53ef\u80fd\u4f1a\u675f\u624b\u65e0\u7b56\u3002 \u5b66\u4e60\u672c\u4e66\uff0c\u5bf9\u4e8e\u4e86\u89e3C++\u548cRust\u4e5f\u662f\u6781\u5176\u6709\u5e2e\u52a9\u7684\uff0c\u5b83\u4eec\u6709\u5f88\u591a\u76f8\u901a\u751a\u81f3\u76f8\u540c\u7684\u5730\u65b9 \u8054\u7cfb\u65b9\u5f0f \u6b22\u8fce\u52a0\u6211\u5fae\u4fe1\u548c\u6211\u672c\u4eba\u8ba8\u8bba\uff1amoldrustcean","title":"\u5f15\u8a00"},{"location":"#c","text":"","title":"C\u8bed\u8a00\u9ad8\u7ea7\u6280\u5de7"},{"location":"#c_1","text":"\u200cC\u8bed\u8a00\u662f\u4e00\u79cd\u9ad8\u6548\u3001\u7b80\u6d01\u3001\u7075\u6d3b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7cfb\u7edf\u8f6f\u4ef6\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3001\u6e38\u620f\u5f00\u53d1\u548c\u7f51\u7edc\u7f16\u7a0b\u7b49\u9886\u57df\u3002\u200c\u5b83\u7531Dennis Ritchie\u57281972\u5e74\u8bbe\u8ba1\uff0c\u6700\u521d\u662f\u4e3a\u4e86\u5f00\u53d1UNIX\u64cd\u4f5c\u7cfb\u7edf\u800c\u521b\u5efa\u7684\u3002C\u8bed\u8a00\u5177\u6709\u9ad8\u6548\u6027\uff0c\u80fd\u591f\u76f4\u63a5\u64cd\u4f5c\u5185\u5b58\uff0c\u751f\u6210\u9ad8\u6548\u7684\u673a\u5668\u7801\uff0c\u540c\u65f6\u5176\u8bed\u6cd5\u7b80\u5355\uff0c\u6613\u4e8e\u5b66\u4e60\u548c\u4f7f\u7528\u3002\u200c","title":"C\u8bed\u8a00\u7b80\u4ecb"},{"location":"#c_2","text":"\u9ad8\u6548\u6027\uff1aC\u8bed\u8a00\u8bbe\u8ba1\u7b80\u6d01\uff0c\u6267\u884c\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6\u8d44\u6e90\u3002 \u53ef\u79fb\u690d\u6027\uff1aC\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u8fd0\u884c\uff0c\u5177\u6709\u826f\u597d\u7684\u53ef\u79fb\u690d\u6027\u3002 C\u8bed\u8a00\u662f\u53ef\u79fb\u690d\u6027\u6700\u5f3a\u7684\u8bed\u8a00\uff0c\u51e0\u4e4e\u6ca1\u6709C\u8bed\u8a00\u4e0d\u80fd\u4f7f\u7528\u7684\u573a\u5408\uff0c\u53ea\u80fd\u8bf4\u5728\u67d0\u4e9b\u573a\u5408\u4e0d\u662f\u6700\u4f73\u9009\u62e9\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u573a\u5408\u5374\u662f\u552f\u4e00\u9009\u62e9\u3002 \u8bed\u6cd5\u7b80\u5355\uff1a C\u8bed\u8a00\u7684\u8bed\u6cd5\u7ed3\u6784\u76f8\u5bf9\u7b80\u5355\uff0c\u53ea\u6709\u5c11\u6570\u51e0\u4e2a\u5173\u952e\u5b57 \uff0c\u6ca1\u6709\u5176\u4ed6\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90a3\u4e48\u591a\u7684\u8bed\u6cd5\u7cd6\u548c\u590d\u6742\u7684\u6982\u5ff5\u3002\u5bf9\u4e8e\u96f6\u57fa\u7840\u7684\u5b66\u4e60\u8005\u6765\u8bf4,\u53ea\u8981\u638c\u63e1\u4e86\u57fa\u672c\u7684\u8bed\u6cd5\u89c4\u5219\u548c\u4e00\u4e9b\u5e38\u7528\u7684\u51fd\u6570,\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u5199\u7b80\u5355\u7684C\u7a0b\u5e8f\u3002 \u529f\u80fd\u5f3a\u5927\uff1aC\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6570\u636e\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26\uff0c\u652f\u6301\u7ed3\u6784\u5316\u7f16\u7a0b\uff0c\u80fd\u591f\u5b9e\u73b0\u590d\u6742\u7684\u7b97\u6cd5\u3002 \u7075\u6d3b\u6027\uff1aC\u8bed\u8a00\u5141\u8bb8\u5bf9\u5185\u5b58\u8fdb\u884c\u76f4\u63a5\u64cd\u4f5c\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7cbe\u7ec6\u63a7\u5236\u7a0b\u5e8f\u7684\u5185\u5b58\u4f7f\u7528\u3002\u8fd9\u4f7f\u5f97\u7a0b\u5e8f\u80fd\u591f\u9ad8\u6548\u5730\u4f7f\u7528\u5185\u5b58\u8d44\u6e90\uff0c\u5c24\u5176\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u4e2d\u5c24\u4e3a\u91cd\u8981\u200c\u3002 abi\u7a33\u5b9a: C\u8bed\u8a00\u81f3\u4eca\u4ecd\u7136\u662f\u5404\u8bed\u8a00\u4e4b\u95f4\u4ea4\u4e92\u7684\u57fa\u5e95\u8bed\u8a00\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0e\u5176\u5b83\u4efb\u4f55\u8bed\u8a00\u4ea4\u4e92\uff0c\u6682\u65f6\u65e0\u4efb\u4f55\u8bed\u8a00\u53ef\u4ee5\u53d6\u4ee3\u5b83\u7684\u4f4d\u7f6e\u200c\u3002","title":"C\u8bed\u8a00\u4f18\u52bf"},{"location":"#c_3","text":"\u200c\u5185\u5b58\u7ba1\u7406\u95ee\u9898\u200c\uff1aC\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u81ea\u52a8\u7684\u5185\u5b58\u7ba1\u7406\u673a\u5236\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u624b\u52a8\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\u548c\u6307\u9488\u9519\u8bef\uff0c\u589e\u52a0\u7a0b\u5e8f\u51fa\u9519\u7684\u6982\u7387\u200c \u7c7b\u578b\u5b89\u5168\u4e0d\u8db3\u200c\uff1aC\u8bed\u8a00\u7f3a\u4e4f\u7c7b\u578b\u5b89\u5168\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u7ba1\u7406\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u7c7b\u578b\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff0c\u589e\u52a0\u7a0b\u5e8f\u51fa\u9519\u7684\u98ce\u9669\u200c \u6307\u9488\u64cd\u4f5c\u590d\u6742\u200c\uff1aC\u8bed\u8a00\u7684\u6307\u9488\u64cd\u4f5c\u975e\u5e38\u590d\u6742\uff0c\u5bb9\u6613\u5bfc\u81f4\u6307\u9488\u9519\u8bef\u3002\u7a0b\u5e8f\u5458\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u5730\u4f7f\u7528\u6307\u9488\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f15\u53d1\u5404\u79cd\u95ee\u9898\u200c \u7f3a\u4e4f\u5f02\u5e38\u5904\u7406\u200c\uff1aC\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u5f02\u5e38\u5904\u7406\u673a\u5236\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u5904\u7406\u5404\u79cd\u9519\u8bef\u60c5\u51b5\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u4e2d\u5145\u65a5\u7740\u5927\u91cf\u7684\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u5f71\u54cd\u4ee3\u7801\u7684\u6574\u6d01\u6027\u548c\u53ef\u8bfb\u6027\u200c \u4e0d\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\u200c\uff1aC\u8bed\u8a00\u4e0d\u652f\u6301\u6cdb\u578b\u7f16\u7a0b\uff0c\u8fd9\u9650\u5236\u4e86\u5176\u5728\u67d0\u4e9b\u65b9\u9762\u7684\u5e94\u7528\u3002\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u7f16\u5199\u5927\u91cf\u7684\u6a21\u677f\u4ee3\u7801\uff0c\u589e\u52a0\u4e86\u5f00\u53d1\u6210\u672c\u200c \u7f3a\u4e4f\u6807\u51c6\u5e93\u652f\u6301\u200c\uff1aC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u652f\u6301\u6709\u9650\uff0c\u8bb8\u591a\u529f\u80fd\u9700\u8981\u7a0b\u5e8f\u5458\u81ea\u5df1\u5b9e\u73b0\u3002\u8fd9\u589e\u52a0\u4e86\u5f00\u53d1\u7684\u590d\u6742\u6027\uff0c\u964d\u4f4e\u4e86\u5f00\u53d1\u6548\u7387\u200c \u5176\u4e2d6\u662f\u75315\u5bfc\u81f4\u7684\uff0c\u800c\u672c\u4e66\u7684\u76ee\u7684\u6b63\u662f\u89e3\u51b34\uff0c5\uff0c6","title":"C\u8bed\u8a00\u52a3\u52bf"},{"location":"#c_4","text":"C++\u7684\u5b66\u4e60\u7fa4\u4f53\u8fdc\u5c11\u4e8eC\u8bed\u8a00\u7684\u5b66\u4e60\u7fa4\u4f53\u3002 C++\u8bed\u6cd5\u590d\u6742\uff0c\u4f5c\u4e3a\u4e00\u95e8\u591a\u8303\u5f0f\u8bed\u8a00\uff0cC++\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u901a\u5e38\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5bfc\u81f4\u540c\u4e00\u56e2\u961f\u5199\u51fa\u6765\u7684\u4ee3\u7801\u53ef\u80fd\u98ce\u683c\u4e0d\u7edf\u4e00\uff0c\u96be\u4e8e\u7ef4\u62a4\u3002 C++\u7684\u7f16\u8bd1\u5668\u5f00\u53d1\u96be\u5ea6\u9ad8\uff0c\u5728\u5f88\u591a\u573a\u5408\u4e0b\uff0cC++\u7684\u7f16\u8bd1\u5668\u672c\u8eab\u662f\u6709BUG\u7684\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528C++\u3002 C++\u5728\u7279\u5b9a\u573a\u5408\u4e0b\u5e76\u4e0d\u80fd\u63a5\u8fd1\u6700\u4f18\u6027\u80fd\uff0c\u4f46\u662fC\u5f80\u5f80\u80fd\u3002 C++\u7684\u8bed\u6cd5\u4e0e\u8fd0\u884c\u65f6\u7ed1\u5b9a\uff0c\u6bd4\u5982new/detele\uff0crtti\u548cexception\u90fd\u662f\u4f9d\u8d56\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u8fd0\u884c\u65f6\u7684\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u975e\u5e38 \u8026\u5408 \u3002\u5982\u679c\u8fd0\u884c\u65f6\u5e93\u672c\u8eab\u6709BUG\uff0c\u5f00\u53d1\u8005\u53ef\u80fd\u4f1a\u675f\u624b\u65e0\u7b56\u3002 \u5b66\u4e60\u672c\u4e66\uff0c\u5bf9\u4e8e\u4e86\u89e3C++\u548cRust\u4e5f\u662f\u6781\u5176\u6709\u5e2e\u52a9\u7684\uff0c\u5b83\u4eec\u6709\u5f88\u591a\u76f8\u901a\u751a\u81f3\u76f8\u540c\u7684\u5730\u65b9","title":"\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4f7f\u7528C++"},{"location":"#_1","text":"\u6b22\u8fce\u52a0\u6211\u5fae\u4fe1\u548c\u6211\u672c\u4eba\u8ba8\u8bba\uff1amoldrustcean","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"bugs/","text":"\u57fa\u7840BUG \u7b97\u672fBUG \u6574\u6570 \u52a0\u6cd5 \u52a0\u6cd5\u4e0a\u6ea2\u51fa int a = INT32_MAX - 1; int b = a + 10; \u52a0\u6cd5\u4e0b\u6ea2\u51fa int a = INT32_MIN + 1; int b = a - 10; \u51cf\u6cd5 \u51cf\u6cd5\u4e0a\u6ea2\u51fa int a = 10; int b = a - INT32_MIN; \u51cf\u6cd5\u4e0b\u6ea2\u51fa int a = -10; int b = a - INT32_MAX; \u53d6\u53cd \u6709\u7b26\u53f7\u6574\u6570\u53d6\u53cd\u4e0a\u6ea2\u51fa int a = INT32_MIN; int b = -a; \u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u6570\uff0c\u53d6\u53cd\u6ca1\u6709\u4e0b\u6ea2\u51fa\uff0c\u56e0\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u7684\u6700\u5c0f\u503c\u7684\u7edd\u5bf9\u503c\u5927\u4e8e\u6700\u5927\u503c\u7684\u7edd\u5bf9\u503c \u65e0\u7b26\u53f7\u6574\u6570\u53d6\u53cd\u4e0b\u6ea2\u51fa \u5bf9\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u9664\u4e860\uff0c\u5176\u4ed6\u4efb\u4f55\u6570\u53d6\u53cd\u90fd\u4f1a\u4e0b\u6ea2\u51fa unsigned int a = 10; unsigned int b = -a; \u4e58\u6cd5 \u4e58\u6cd5\u4e0a\u6ea2\u51fa int a = INT32_MAX / 2; int b = INT32_MAX / 2; int c = a * b; \u6574\u6570\u4e58\u6cd5\u4e0b\u6ea2\u51fa int a = INT32_MIN / 2; int b = INT32_MIN / 2; int c = a * b; \u9664\u6cd5\u548c\u6a21\u8fd0\u7b97 \u9664\u96f6\u901a\u5e38\u4f1a\u9020\u6210\u786c\u4ef6\u5f02\u5e38 \u9664\u96f6 int a = 10; int b = 0; int c = a / b; \u79fb\u4f4d \u6709\u7b26\u53f7\u6574\u6570\u5de6\u79fb\u6ea2\u51fa \u56e0\u4e3a\u6709\u7b26\u53f7\u4f4d\uff0c\u6709\u7b26\u53f7\u6574\u6570\u5141\u8bb8\u5de6\u79fb\u7684\u6700\u5927\u4f4d\u6570\u8981\u6bd4\u81ea\u8eab\u7684\u4f4d\u6570\u5c0f1\u3002 int a = 0; int b = a << 31; \u65e0\u7b26\u53f7\u6574\u6570\u5de6\u79fb\u6ea2\u51fa \u65e0\u7b26\u53f7\u6574\u6570\u5141\u8bb8\u5de6\u79fb\u7684\u6700\u5927\u4f4d\u6570\u901a\u5e38\u548c\u81ea\u8eab\u4f4d\u6570\u76f8\u7b49\u3002 unsigned int a = 0; unsigned int b = a << 32; \u6d6e\u70b9\u6570 inf\u548cnan \u5728\u8ba1\u7b97\u673a\u4e2d\uff0cinf\u548cNaN\u662f\u6d6e\u70b9\u6570\u4e2d\u7684\u7279\u6b8a\u503c\u3002 inf\u8868\u793a\u65e0\u7a77\u5927\uff0c\u5b83\u5728\u8ba1\u7b97\u673a\u4e2d\u901a\u5e38\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5373\u6240\u6709\u4f4d\u90fd\u662f1\uff0c\u4e14\u6307\u6570\u90e8\u5206\u4e3a\u51681\uff0c\u5c3e\u6570\u90e8\u5206\u4e3a0\u3002 NaN\u8868\u793a\u975e\u6570\u5b57\uff08Not a Number\uff09\uff0c\u5b83\u5728\u8ba1\u7b97\u673a\u4e2d\u901a\u5e38\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5373\u6307\u6570\u90e8\u5206\u4e3a\u51681\uff0c\u5c3e\u6570\u90e8\u5206\u4e0d\u4e3a0\u3002 \u52a0\u6cd5 \u4e0a\u6ea2\u51fa float a = FLT_MAX - 1; float b = a + 2.0; assert(b == INF); \u4e0b\u6ea2\u51fa float a = FLT_MIN + 1; float b = a - 2.0; assert(b == -INF); \u51cf\u6cd5 float a = 2.0; float b = a - FLT_MIN; assert(b == INF); \u4e0b\u6ea2\u51fa float a = -2.0; float b = a - FLT_MAX; assert(b == -INF); \u4e58\u6cd5 float a = FLT_MAX; float b = a * 2.0; assert(b == INF); \u4e0b\u6ea2\u51fa float a = FLT_MIN; float b = a * 2.0; assert(b == -INF); \u9664\u6cd5 \u4e8b\u5b9e\u4e0a\u9664\u96f6\u5e76\u4e0d\u4e00\u5b9a\u5b8c\u5168\u5c31\u662f\u9664\u4ee50\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u7684\u7cbe\u5ea6\u6709\u8bef\u5dee\uff0c\u4e8b\u5b9e\u4e0a\u9664\u4ee5\u4e00\u4e2a\u5f88\u5c0f\u7684\u6570\uff0c\u5c0f\u4e8eFLT_EPS\u7b49\u540c\u4e8e\u9664\u96f6\u3002 \u6b63\u6570\u9664\u96f6\u4e0a\u6ea2\u51fa float a = 2.0; float b = a / 0.0; assert(b == INF); \u8d1f\u6570\u9664\u96f6\u4e0a\u6ea2\u51fa float a = -2.0; float b = a / 0.0; assert(b == -INF); \u96f6\u9664\u96f6\u4e0a\u6ea2\u51fa float a = 0.0; float b = a / 0.0; assert(b == NAN); \u5185\u5b58BUG \u5185\u5b58\u8d8a\u754c\uff08overflow\uff09 \u5806\u5185\u5b58\u8d8a\u754c int main() { int* ptr = (int*)malloc(8 * sizeof(int)); ptr[10] = 10; free(ptr); return 0; } \u6808\u5185\u5b58\u8d8a\u754c int main() { int arr[10] = {0}; arr[10] = 10; return 0; } \u5168\u5c40\u5185\u5b58\u8d8a\u754c int arr[10] = {0}; int main() { arr[10] = 10; return 0; } \u5185\u5b58\u6cc4\u6f0f\uff08leak\uff09 \u76f4\u5230\u7a0b\u5e8f\u9000\u51fa\u4e5f\u6ca1\u6709\u91ca\u653e\u7684\u5185\u5b58\u5f80\u5f80\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\u3002 int* func() { int* ptr = (int*)malloc(1024 * sizeof(int)); return ptr; } int main() { int* ptr = func(); return 0; } \u53cc\u91cd\u91ca\u653e\uff08doble free\uff09 int* func() { int* ptr = (int*)malloc(1024 * sizeof(int)); free(ptr); return ptr; } int main() { int* ptr = func(); free(ptr); return 0; } \u91ca\u653e\u540e\u4f7f\u7528\uff08use after free\uff09 int* func() { int* ptr = (int*)malloc(1024 * sizeof(int)); free(ptr); return ptr; } int main() { int* ptr = func(); *ptr = 10; return 0; } \u91ce\u6307\u9488 \u4ee5\u4e0b\u7c7b\u578b\u7edf\u79f0\u4e3a\u91ce\u6307\u9488 \u7a7a\u6307\u9488 \u521d\u59cb\u5316\u4e3a\u7a7a\u7684\u6307\u9488 int main() { int* p = NULL; *p = 10; return 0; } #### \u968f\u673a\u6307\u9488 \u6ca1\u6709\u88ab\u521d\u59cb\u5316\u5c31\u88ab\u4f7f\u7528\u7684\u6307\u9488\u5f80\u5f80\u6307\u5411\u968f\u673a\u503c\uff0c\u5f53\u7136\u4e5f\u53ef\u80fd\u662f\u7a7a\u503c\u3002 ```c int main() { int* p; *p = 10; return 0; } \u60ac\u5782\u6307\u9488 \u60ac\u5782\u901a\u5e38\u6307\u8be5\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u7684\u751f\u547d\u5468\u671f\u5df2\u7ecf\u7ed3\u675f\uff0c\u6700\u5178\u578b\u7684\u662f\u8fd4\u56de\u6808\u4e0a\u53d8\u91cf\u7684\u5730\u5740\u3002 int* func() { int a = 0; return &a; } int main() { // \u8fd9\u5c31\u662f\u60ac\u5782\u6307\u9488 int* ptr = func(); return 0; } ### \u6808\u6ea2\u51fa \u4ee5\u4e0b\u7a0b\u5e8f\u5728\u67d0\u4e9b\u673a\u5668\u4e0b\u53ef\u80fd\u4f1a\u6808\u6ea2\u51fa\uff0c\u6ce8\u610ffunc\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u90fd\u88ab\u5206\u914d\u5728\u6808\u4e0a\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6808\u5185\u5b58\u4e0d\u8db3\u3002 ```c long func(int arr[]) { long sum = 0; ... return sum; } int main() { int arr[1024 * 1024]; long sum = func(arr); printf(\"%ld\", sum); return 0; } \u5e76\u53d1BUG \u4e3a\u4e86\u53ef\u79fb\u690d\u6027\uff0c\u8fd9\u91cc\u4f7f\u7528 tinycthread \u7684api\u3002 \u6570\u636e\u8bfb\u5199\u7ade\u4e89 \u9501\u76f8\u5173BUG #include <tinycthread.h> int value = 0; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; int thr_routine(void* data) { // \u4e0d\u540c\u7ebf\u7a0b\u6539\u5199\u540c\u4e00\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u89e6\u53d1BUG value = (thr_call*)data->push; return 0; } int main(int argc, char const *argv[]) { thr_call val[5] = {0}; for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { val[i].push = i; thrd_create(&(val[i].thr), thr_rountine, &(val[i])); } for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { thrd_join(val[i].thr, &(val[i].ret)); } // \u67e5\u770b\u8fd4\u56de\u503c for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { printf(\"return:[%d], expect:[%d]\\n\", val[i].ret, i%2==0?0:1); } return 0; } \u6b7b\u9501 #include <tinycthread.h> mtx_t mtx1; mtx_t mtx2; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; void print(void* data) { for (size_t i = 0; i < 5; i++) { printf(\"thread:[%d], index:[%d]\\n\", ((th_call*)data)->push, i); } } int thr1_routine(void* data) { mtx_lock(&mtx1); mtx_lock(&mtx2); print(data); mtx_unlock(&mtx2); mtx_unlock(&mtx1); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int thr2_routine(void* data) { mtx_lock(&mtx2); mtx_lock(&mtx1); print(data); mtx_unlock(&mtx1); mtx_unlock(&mtx2); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int main(int argc, char const *argv[]) { thr_call val[2] = {0}; mtx_init(&mtx1, mtx_plain); mtx_init(&mtx2, mtx_plain); val[0].push = 0; val[1].push = 1; thrd_create(&(val[0].thr), thrd1_rountine, &(val[0])); thrd_create(&(val[1].thr), thrd2_rountine, &(val[1])); thrd_join(val[0].thr, &(val[0].ret)); thrd_join(val[1].thr, &(val[1].ret)); mtx_destroy(&mtx1); mtx_destroy(&mtx2); return 0; } \u4e0d\u53ef\u91cd\u5165\u9501\u91cd\u5165 #include <tinycthread.h> mtx_t mtx; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; void print(void* data) { // \u8fd9\u91cc\u4f1a\u89e6\u53d1BUG\uff0c\u4e00\u76f4\u7b49\u5f85 mtx_lock(&mtx); for (size_t i = 0; i < 5; i++) { printf(\"thread:[%d], index:[%d]\\n\", ((th_call*)data)->push, i); } mtx_unlock(&mtx); } int thr_routine(void* data) { mtx_lock(&mtx); print(data); mtx_unlock(&mtx); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int main(int argc, char const *argv[]) { thr_call val[5] = {0}; mtx_init(&mtx, mtx_plain); for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { val[i].push = i; thrd_create(&(val[i].thr), thr_rountine, &(val[i])); } for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { thrd_join(val[i].thr, &(val[i].ret)); } // \u67e5\u770b\u8fd4\u56de\u503c for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { printf(\"return:[%d], expect:[%d]\\n\", val[i].ret, i%2==0?0:1); } mtx_destroy(&mtx); return 0; } \u9501\u5728\u540c\u4e00\u7ebf\u7a0b\u591a\u6b21\u91ca\u653e #include <tinycthread.h> mtx_t mtx; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; void print(void* data) { for (size_t i = 0; i < 5; i++) { printf(\"thread:[%d], index:[%d]\\n\", ((th_call*)data)->push, i); } mtx_unlock(&mtx); } int thr_routine(void* data) { mtx_lock(&mtx); print(data); // \u8fd9\u91cc\u4f1a\u89e6\u53d1BUG\uff0c\u88ab\u7b2c\u4e8c\u6b21\u91ca\u653e mtx_unlock(&mtx); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int main(int argc, char const *argv[]) { thr_call val[5] = {0}; mtx_init(&mtx, mtx_plain); for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { val[i].push = i; thrd_create(&(val[i].thr), thr_rountine, &(val[i])); } for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { thrd_join(val[i].thr, &(val[i].ret)); } // \u67e5\u770b\u8fd4\u56de\u503c for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { printf(\"return:[%d], expect:[%d]\\n\", val[i].ret, i%2==0?0:1); } mtx_destroy(&mtx); return 0; }","title":"\u57fa\u7840BUG"},{"location":"bugs/#bug","text":"","title":"\u57fa\u7840BUG"},{"location":"bugs/#bug_1","text":"","title":"\u7b97\u672fBUG"},{"location":"bugs/#_1","text":"","title":"\u6574\u6570"},{"location":"bugs/#_2","text":"","title":"\u52a0\u6cd5"},{"location":"bugs/#_3","text":"int a = INT32_MAX - 1; int b = a + 10;","title":"\u52a0\u6cd5\u4e0a\u6ea2\u51fa"},{"location":"bugs/#_4","text":"int a = INT32_MIN + 1; int b = a - 10;","title":"\u52a0\u6cd5\u4e0b\u6ea2\u51fa"},{"location":"bugs/#_5","text":"","title":"\u51cf\u6cd5"},{"location":"bugs/#_6","text":"int a = 10; int b = a - INT32_MIN;","title":"\u51cf\u6cd5\u4e0a\u6ea2\u51fa"},{"location":"bugs/#_7","text":"int a = -10; int b = a - INT32_MAX;","title":"\u51cf\u6cd5\u4e0b\u6ea2\u51fa"},{"location":"bugs/#_8","text":"","title":"\u53d6\u53cd"},{"location":"bugs/#_9","text":"int a = INT32_MIN; int b = -a; \u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u6570\uff0c\u53d6\u53cd\u6ca1\u6709\u4e0b\u6ea2\u51fa\uff0c\u56e0\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u7684\u6700\u5c0f\u503c\u7684\u7edd\u5bf9\u503c\u5927\u4e8e\u6700\u5927\u503c\u7684\u7edd\u5bf9\u503c","title":"\u6709\u7b26\u53f7\u6574\u6570\u53d6\u53cd\u4e0a\u6ea2\u51fa"},{"location":"bugs/#_10","text":"\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u9664\u4e860\uff0c\u5176\u4ed6\u4efb\u4f55\u6570\u53d6\u53cd\u90fd\u4f1a\u4e0b\u6ea2\u51fa unsigned int a = 10; unsigned int b = -a;","title":"\u65e0\u7b26\u53f7\u6574\u6570\u53d6\u53cd\u4e0b\u6ea2\u51fa"},{"location":"bugs/#_11","text":"","title":"\u4e58\u6cd5"},{"location":"bugs/#_12","text":"int a = INT32_MAX / 2; int b = INT32_MAX / 2; int c = a * b;","title":"\u4e58\u6cd5\u4e0a\u6ea2\u51fa"},{"location":"bugs/#_13","text":"int a = INT32_MIN / 2; int b = INT32_MIN / 2; int c = a * b;","title":"\u6574\u6570\u4e58\u6cd5\u4e0b\u6ea2\u51fa"},{"location":"bugs/#_14","text":"\u9664\u96f6\u901a\u5e38\u4f1a\u9020\u6210\u786c\u4ef6\u5f02\u5e38","title":"\u9664\u6cd5\u548c\u6a21\u8fd0\u7b97"},{"location":"bugs/#_15","text":"int a = 10; int b = 0; int c = a / b;","title":"\u9664\u96f6"},{"location":"bugs/#_16","text":"","title":"\u79fb\u4f4d"},{"location":"bugs/#_17","text":"\u56e0\u4e3a\u6709\u7b26\u53f7\u4f4d\uff0c\u6709\u7b26\u53f7\u6574\u6570\u5141\u8bb8\u5de6\u79fb\u7684\u6700\u5927\u4f4d\u6570\u8981\u6bd4\u81ea\u8eab\u7684\u4f4d\u6570\u5c0f1\u3002 int a = 0; int b = a << 31;","title":"\u6709\u7b26\u53f7\u6574\u6570\u5de6\u79fb\u6ea2\u51fa"},{"location":"bugs/#_18","text":"\u65e0\u7b26\u53f7\u6574\u6570\u5141\u8bb8\u5de6\u79fb\u7684\u6700\u5927\u4f4d\u6570\u901a\u5e38\u548c\u81ea\u8eab\u4f4d\u6570\u76f8\u7b49\u3002 unsigned int a = 0; unsigned int b = a << 32;","title":"\u65e0\u7b26\u53f7\u6574\u6570\u5de6\u79fb\u6ea2\u51fa"},{"location":"bugs/#_19","text":"","title":"\u6d6e\u70b9\u6570"},{"location":"bugs/#infnan","text":"\u5728\u8ba1\u7b97\u673a\u4e2d\uff0cinf\u548cNaN\u662f\u6d6e\u70b9\u6570\u4e2d\u7684\u7279\u6b8a\u503c\u3002 inf\u8868\u793a\u65e0\u7a77\u5927\uff0c\u5b83\u5728\u8ba1\u7b97\u673a\u4e2d\u901a\u5e38\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5373\u6240\u6709\u4f4d\u90fd\u662f1\uff0c\u4e14\u6307\u6570\u90e8\u5206\u4e3a\u51681\uff0c\u5c3e\u6570\u90e8\u5206\u4e3a0\u3002 NaN\u8868\u793a\u975e\u6570\u5b57\uff08Not a Number\uff09\uff0c\u5b83\u5728\u8ba1\u7b97\u673a\u4e2d\u901a\u5e38\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5373\u6307\u6570\u90e8\u5206\u4e3a\u51681\uff0c\u5c3e\u6570\u90e8\u5206\u4e0d\u4e3a0\u3002","title":"inf\u548cnan"},{"location":"bugs/#_20","text":"","title":"\u52a0\u6cd5"},{"location":"bugs/#_21","text":"float a = FLT_MAX - 1; float b = a + 2.0; assert(b == INF);","title":"\u4e0a\u6ea2\u51fa"},{"location":"bugs/#_22","text":"float a = FLT_MIN + 1; float b = a - 2.0; assert(b == -INF);","title":"\u4e0b\u6ea2\u51fa"},{"location":"bugs/#_23","text":"float a = 2.0; float b = a - FLT_MIN; assert(b == INF);","title":"\u51cf\u6cd5"},{"location":"bugs/#_24","text":"float a = -2.0; float b = a - FLT_MAX; assert(b == -INF);","title":"\u4e0b\u6ea2\u51fa"},{"location":"bugs/#_25","text":"float a = FLT_MAX; float b = a * 2.0; assert(b == INF);","title":"\u4e58\u6cd5"},{"location":"bugs/#_26","text":"float a = FLT_MIN; float b = a * 2.0; assert(b == -INF);","title":"\u4e0b\u6ea2\u51fa"},{"location":"bugs/#_27","text":"\u4e8b\u5b9e\u4e0a\u9664\u96f6\u5e76\u4e0d\u4e00\u5b9a\u5b8c\u5168\u5c31\u662f\u9664\u4ee50\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u7684\u7cbe\u5ea6\u6709\u8bef\u5dee\uff0c\u4e8b\u5b9e\u4e0a\u9664\u4ee5\u4e00\u4e2a\u5f88\u5c0f\u7684\u6570\uff0c\u5c0f\u4e8eFLT_EPS\u7b49\u540c\u4e8e\u9664\u96f6\u3002","title":"\u9664\u6cd5"},{"location":"bugs/#_28","text":"float a = 2.0; float b = a / 0.0; assert(b == INF);","title":"\u6b63\u6570\u9664\u96f6\u4e0a\u6ea2\u51fa"},{"location":"bugs/#_29","text":"float a = -2.0; float b = a / 0.0; assert(b == -INF);","title":"\u8d1f\u6570\u9664\u96f6\u4e0a\u6ea2\u51fa"},{"location":"bugs/#_30","text":"float a = 0.0; float b = a / 0.0; assert(b == NAN);","title":"\u96f6\u9664\u96f6\u4e0a\u6ea2\u51fa"},{"location":"bugs/#bug_2","text":"","title":"\u5185\u5b58BUG"},{"location":"bugs/#overflow","text":"","title":"\u5185\u5b58\u8d8a\u754c\uff08overflow\uff09"},{"location":"bugs/#_31","text":"int main() { int* ptr = (int*)malloc(8 * sizeof(int)); ptr[10] = 10; free(ptr); return 0; }","title":"\u5806\u5185\u5b58\u8d8a\u754c"},{"location":"bugs/#_32","text":"int main() { int arr[10] = {0}; arr[10] = 10; return 0; }","title":"\u6808\u5185\u5b58\u8d8a\u754c"},{"location":"bugs/#_33","text":"int arr[10] = {0}; int main() { arr[10] = 10; return 0; }","title":"\u5168\u5c40\u5185\u5b58\u8d8a\u754c"},{"location":"bugs/#leak","text":"\u76f4\u5230\u7a0b\u5e8f\u9000\u51fa\u4e5f\u6ca1\u6709\u91ca\u653e\u7684\u5185\u5b58\u5f80\u5f80\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\u3002 int* func() { int* ptr = (int*)malloc(1024 * sizeof(int)); return ptr; } int main() { int* ptr = func(); return 0; }","title":"\u5185\u5b58\u6cc4\u6f0f\uff08leak\uff09"},{"location":"bugs/#doble-free","text":"int* func() { int* ptr = (int*)malloc(1024 * sizeof(int)); free(ptr); return ptr; } int main() { int* ptr = func(); free(ptr); return 0; }","title":"\u53cc\u91cd\u91ca\u653e\uff08doble free\uff09"},{"location":"bugs/#use-after-free","text":"int* func() { int* ptr = (int*)malloc(1024 * sizeof(int)); free(ptr); return ptr; } int main() { int* ptr = func(); *ptr = 10; return 0; }","title":"\u91ca\u653e\u540e\u4f7f\u7528\uff08use after free\uff09"},{"location":"bugs/#_34","text":"\u4ee5\u4e0b\u7c7b\u578b\u7edf\u79f0\u4e3a\u91ce\u6307\u9488","title":"\u91ce\u6307\u9488"},{"location":"bugs/#_35","text":"\u521d\u59cb\u5316\u4e3a\u7a7a\u7684\u6307\u9488 int main() { int* p = NULL; *p = 10; return 0; } #### \u968f\u673a\u6307\u9488 \u6ca1\u6709\u88ab\u521d\u59cb\u5316\u5c31\u88ab\u4f7f\u7528\u7684\u6307\u9488\u5f80\u5f80\u6307\u5411\u968f\u673a\u503c\uff0c\u5f53\u7136\u4e5f\u53ef\u80fd\u662f\u7a7a\u503c\u3002 ```c int main() { int* p; *p = 10; return 0; }","title":"\u7a7a\u6307\u9488"},{"location":"bugs/#_36","text":"\u60ac\u5782\u901a\u5e38\u6307\u8be5\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u7684\u751f\u547d\u5468\u671f\u5df2\u7ecf\u7ed3\u675f\uff0c\u6700\u5178\u578b\u7684\u662f\u8fd4\u56de\u6808\u4e0a\u53d8\u91cf\u7684\u5730\u5740\u3002 int* func() { int a = 0; return &a; } int main() { // \u8fd9\u5c31\u662f\u60ac\u5782\u6307\u9488 int* ptr = func(); return 0; } ### \u6808\u6ea2\u51fa \u4ee5\u4e0b\u7a0b\u5e8f\u5728\u67d0\u4e9b\u673a\u5668\u4e0b\u53ef\u80fd\u4f1a\u6808\u6ea2\u51fa\uff0c\u6ce8\u610ffunc\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u90fd\u88ab\u5206\u914d\u5728\u6808\u4e0a\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6808\u5185\u5b58\u4e0d\u8db3\u3002 ```c long func(int arr[]) { long sum = 0; ... return sum; } int main() { int arr[1024 * 1024]; long sum = func(arr); printf(\"%ld\", sum); return 0; }","title":"\u60ac\u5782\u6307\u9488"},{"location":"bugs/#bug_3","text":"\u4e3a\u4e86\u53ef\u79fb\u690d\u6027\uff0c\u8fd9\u91cc\u4f7f\u7528 tinycthread \u7684api\u3002","title":"\u5e76\u53d1BUG"},{"location":"bugs/#_37","text":"","title":"\u6570\u636e\u8bfb\u5199\u7ade\u4e89"},{"location":"bugs/#bug_4","text":"#include <tinycthread.h> int value = 0; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; int thr_routine(void* data) { // \u4e0d\u540c\u7ebf\u7a0b\u6539\u5199\u540c\u4e00\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u89e6\u53d1BUG value = (thr_call*)data->push; return 0; } int main(int argc, char const *argv[]) { thr_call val[5] = {0}; for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { val[i].push = i; thrd_create(&(val[i].thr), thr_rountine, &(val[i])); } for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { thrd_join(val[i].thr, &(val[i].ret)); } // \u67e5\u770b\u8fd4\u56de\u503c for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { printf(\"return:[%d], expect:[%d]\\n\", val[i].ret, i%2==0?0:1); } return 0; }","title":"\u9501\u76f8\u5173BUG"},{"location":"bugs/#_38","text":"#include <tinycthread.h> mtx_t mtx1; mtx_t mtx2; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; void print(void* data) { for (size_t i = 0; i < 5; i++) { printf(\"thread:[%d], index:[%d]\\n\", ((th_call*)data)->push, i); } } int thr1_routine(void* data) { mtx_lock(&mtx1); mtx_lock(&mtx2); print(data); mtx_unlock(&mtx2); mtx_unlock(&mtx1); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int thr2_routine(void* data) { mtx_lock(&mtx2); mtx_lock(&mtx1); print(data); mtx_unlock(&mtx1); mtx_unlock(&mtx2); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int main(int argc, char const *argv[]) { thr_call val[2] = {0}; mtx_init(&mtx1, mtx_plain); mtx_init(&mtx2, mtx_plain); val[0].push = 0; val[1].push = 1; thrd_create(&(val[0].thr), thrd1_rountine, &(val[0])); thrd_create(&(val[1].thr), thrd2_rountine, &(val[1])); thrd_join(val[0].thr, &(val[0].ret)); thrd_join(val[1].thr, &(val[1].ret)); mtx_destroy(&mtx1); mtx_destroy(&mtx2); return 0; }","title":"\u6b7b\u9501"},{"location":"bugs/#_39","text":"#include <tinycthread.h> mtx_t mtx; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; void print(void* data) { // \u8fd9\u91cc\u4f1a\u89e6\u53d1BUG\uff0c\u4e00\u76f4\u7b49\u5f85 mtx_lock(&mtx); for (size_t i = 0; i < 5; i++) { printf(\"thread:[%d], index:[%d]\\n\", ((th_call*)data)->push, i); } mtx_unlock(&mtx); } int thr_routine(void* data) { mtx_lock(&mtx); print(data); mtx_unlock(&mtx); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int main(int argc, char const *argv[]) { thr_call val[5] = {0}; mtx_init(&mtx, mtx_plain); for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { val[i].push = i; thrd_create(&(val[i].thr), thr_rountine, &(val[i])); } for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { thrd_join(val[i].thr, &(val[i].ret)); } // \u67e5\u770b\u8fd4\u56de\u503c for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { printf(\"return:[%d], expect:[%d]\\n\", val[i].ret, i%2==0?0:1); } mtx_destroy(&mtx); return 0; }","title":"\u4e0d\u53ef\u91cd\u5165\u9501\u91cd\u5165"},{"location":"bugs/#_40","text":"#include <tinycthread.h> mtx_t mtx; typedef struct thr_call_s { thrd_t thr; int push; int ret; } thr_call; void print(void* data) { for (size_t i = 0; i < 5; i++) { printf(\"thread:[%d], index:[%d]\\n\", ((th_call*)data)->push, i); } mtx_unlock(&mtx); } int thr_routine(void* data) { mtx_lock(&mtx); print(data); // \u8fd9\u91cc\u4f1a\u89e6\u53d1BUG\uff0c\u88ab\u7b2c\u4e8c\u6b21\u91ca\u653e mtx_unlock(&mtx); return ((thr_call*)data)->push % 2 == 0? 0 : 1; } int main(int argc, char const *argv[]) { thr_call val[5] = {0}; mtx_init(&mtx, mtx_plain); for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { val[i].push = i; thrd_create(&(val[i].thr), thr_rountine, &(val[i])); } for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { thrd_join(val[i].thr, &(val[i].ret)); } // \u67e5\u770b\u8fd4\u56de\u503c for (size_t i = 0; i < sizeof(val) / sizeof(*val); i++) { printf(\"return:[%d], expect:[%d]\\n\", val[i].ret, i%2==0?0:1); } mtx_destroy(&mtx); return 0; }","title":"\u9501\u5728\u540c\u4e00\u7ebf\u7a0b\u591a\u6b21\u91ca\u653e"},{"location":"build_system/","text":"\u6784\u5efa\u7cfb\u7edf make ninja visual studio solution configure cmake xmake \u81ea\u5b9a\u4e49\u6784\u5efa\u7cfb\u7edf","title":"\u6784\u5efa\u7cfb\u7edf"},{"location":"build_system/#_1","text":"","title":"\u6784\u5efa\u7cfb\u7edf"},{"location":"build_system/#make","text":"","title":"make"},{"location":"build_system/#ninja","text":"","title":"ninja"},{"location":"build_system/#visual-studio-solution","text":"","title":"visual studio solution"},{"location":"build_system/#configure","text":"","title":"configure"},{"location":"build_system/#cmake","text":"","title":"cmake"},{"location":"build_system/#xmake","text":"","title":"xmake"},{"location":"build_system/#_2","text":"","title":"\u81ea\u5b9a\u4e49\u6784\u5efa\u7cfb\u7edf"},{"location":"compiler/","text":"\u5e38\u7528\u7f16\u8bd1\u5668 \u7c7bunix\u7cfb\u7edf\uff08linux\uff0cmacos\uff09 gcc clang windows mingw-gcc msvc","title":"\u5e38\u7528\u7f16\u8bd1\u5668"},{"location":"compiler/#_1","text":"","title":"\u5e38\u7528\u7f16\u8bd1\u5668"},{"location":"compiler/#unixlinuxmacos","text":"","title":"\u7c7bunix\u7cfb\u7edf\uff08linux\uff0cmacos\uff09"},{"location":"compiler/#gcc","text":"","title":"gcc"},{"location":"compiler/#clang","text":"","title":"clang"},{"location":"compiler/#windows","text":"","title":"windows"},{"location":"compiler/#mingw-gcc","text":"","title":"mingw-gcc"},{"location":"compiler/#msvc","text":"","title":"msvc"},{"location":"concepts/","text":"\u91cd\u8981\u6982\u5ff5 \u58f0\u660e\u548c\u5b9a\u4e49 \u5728C\u8bed\u8a00\u4e2d\uff0c\u58f0\u660e\u548c\u5b9a\u4e49\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5\u3002\u58f0\u660e\u901a\u5e38\u7528\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u6709\u8fd9\u4e48\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5b58\u5728\uff0c\u800c\u5b9a\u4e49\u5219\u662f\u521b\u5efa\u8fd9\u4e2a\u53d8\u91cf\u6216\u8005\u51fd\u6570\u3002 \u58f0\u660e\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\uff0c\u800c\u5b9a\u4e49\u53ea\u80fd\u6709\u4e00\u6b21\u3002 \u58f0\u660e\u901a\u5e38\u653e\u5728\u5934\u6587\u4ef6\u91cc\uff0c\u4f5c\u4e3a\u63a5\u53e3\u6587\u4ef6\u4f7f\u7528\u3002 \u58f0\u660e\u6709\u5173\u6982\u5ff5 \u5b58\u50a8\u7c7b\u578b\uff08storage class\uff09 \u5b58\u50a8\u7c7b\u662fC\u8bed\u8a00\u4e0eC++\u8bed\u8a00\u7684\u6807\u51c6\u4e2d\uff0c\u53d8\u91cf\u4e0e\u51fd\u6570\u7684\u53ef\u8bbf\u95ee\u6027(\u5373\u4f5c\u7528\u57df\u8303\u56f4scope)\u4e0e\u751f\u5b58\u671f(life time)\u3002 \u5b58\u50a8\u7c7b\u53ef\u5206\u4e3a auto \u3001 register \u3001 static \u3001 extern \u3001 thread_local \u7b49\u3002 \u7c7b\u578b\u8bf4\u660e\u7b26\uff08type-specifier\uff09 \u5982 void \u3001 char \u3001 short \u3001 int \u3001\u7ed3\u6784\u4f53\u7c7b\u578b\u3001\u679a\u4e3e\u7c7b\u578b\u7b49 \u7c7b\u578b\u9650\u5b9a\u7b26\uff08type-qualifier\uff09 \u5982 const \u3001 volatile \u3001 restrict \u7c7b\u578b\u4fee\u9970\u7b26 unsigned signed \u5b9a\u4e49\u76f8\u5173\u6982\u5ff5 \u94fe\u63a5\u65b9\u5f0f \u5728 C \u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u94fe\u63a5\u65b9\u5f0f\u4e3b\u8981\u5206\u4e3a\u4e09\u79cd\uff1a\u5916\u90e8\u94fe\u63a5\uff08External Linkage\uff09\u3001\u5185\u90e8\u94fe\u63a5\uff08Internal Linkage\uff09 \u548c \u65e0\u94fe\u63a5\uff08No Linkage\uff09\u3002 \u5916\u90e8\u94fe\u63a5\uff08External Linkage\uff09 \u5177\u6709\u5916\u90e8\u94fe\u63a5\u7684\u53d8\u91cf\u53ef\u4ee5\u88ab\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u8bbf\u95ee\u3002\u4f8b\u5982\u975estatic\u7684\u5168\u5c40\u53d8\u91cf\u3002 // file1.c int global_var = 10; // \u5916\u90e8\u94fe\u63a5 // file2.c extern int global_var; // \u5f15\u7528\u5916\u90e8\u53d8\u91cf \u5185\u90e8\u94fe\u63a5\uff08Internal Linkage\uff09 \u5177\u6709\u5185\u90e8\u94fe\u63a5\u7684\u53d8\u91cf\u53ea\u80fd\u5728\u5b9a\u4e49\u5b83\u7684\u6587\u4ef6\u4e2d\u8bbf\u95ee\u3002\u7279\u522b\u662f\u4f7f\u7528 static \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u3002 // file1.c static int internal_var = 20; // \u5185\u90e8\u94fe\u63a5 // file2.c int internal_var; // \u4e0d\u80fd\u8bbf\u95ee \u65e0\u94fe\u63a5\uff08No Linkage\uff09 \u65e0\u94fe\u63a5\u7684\u53d8\u91cf\u5728\u5176\u4f5c\u7528\u57df\u5185\u662f\u552f\u4e00\u7684\uff0c\u65e0\u6cd5\u5728\u5176\u4ed6\u4f5c\u7528\u57df\u4e2d\u8bbf\u95ee\u3002\u4f8b\u5982\u5c40\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u53c2\u6570\u3002 void func() { int local_var = 30; // \u65e0\u94fe\u63a5 // local_var \u53ea\u80fd\u5728 func \u5185\u90e8\u8bbf\u95ee } \u53d8\u91cf\u7684\u58f0\u660e\u548c\u5b9a\u4e49 \u53d8\u91cf\u7684\u58f0\u660e\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4e00\u79cd\u662f\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u79f0\u4e3a\u5b9a\u4e49\u6027\u58f0\u660e\uff1b\u53e6\u4e00\u79cd\u662f\u4e0d\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u79f0\u4e3a\u5f15\u7528\u6027\u58f0\u660e\u3002 int a = 1; // \u8fd9\u662f\u53d8\u91cf\u7684\u5b9a\u4e49 extern int a; // \u8fd9\u662f\u53d8\u91cf\u7684\u58f0\u660e \u51fd\u6570\u7684\u58f0\u660e\u548c\u5b9a\u4e49 \u51fd\u6570\u7684\u58f0\u660e\u901a\u5e38\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u800c\u5b9a\u4e49\u5728.c\u6587\u4ef6\u4e2d\u3002 // func.h int add(int a, int b); // \u51fd\u6570\u58f0\u660e // func.c #include \"func.h\" int add(int a, int b) { // \u51fd\u6570\u5b9a\u4e49 return a + b; } \u4f20\u503c\u548c\u4f20\u5730\u5740 \u5728C\u8bed\u8a00\u4e2d\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u4f20\u503c\u548c\u4f20\u5740\u3002 \u4f20\u503c\uff08Pass by Value\uff09\uff1a\u51fd\u6570\u5185\u90e8\u5bf9\u53c2\u6570\u8fdb\u884c\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u5916\u90e8\u7684\u5b9e\u53c2\u3002 #include <stdio.h> void swap(int a, int b) { int temp = a; a = b; b = temp; printf(\"In swap: a = %d, b = %d\\n\", a, b); } int main() { int x = 10; int y = 20; swap(x, y); printf(\"In main: x = %d, y = %d\\n\", x, y); return 0; } \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cswap\u51fd\u6570\u7684\u53c2\u6570\u662f\u6309\u7167\u4f20\u503c\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u51fd\u6570\u5185\u90e8\u7684a\u548cb\u53ea\u662f\u5916\u90e8\u5b9e\u53c2x\u548cy\u7684\u62f7\u8d1d\uff0c\u6240\u4ee5\u5373\u4f7f\u5728swap\u51fd\u6570\u5185\u90e8\u5bf9a\u548cb\u8fdb\u884c\u4e86\u4ea4\u6362\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cdx\u548cy\u7684\u503c\u3002 \u4f20\u5740\uff08Pass by Reference\uff09\uff1a\u901a\u8fc7\u6307\u9488\u6216\u8005\u5f15\u7528\u6765\u4f20\u9012\u53c2\u6570\uff0c\u8fd9\u6837\u51fd\u6570\u5185\u90e8\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u5230\u5916\u90e8\u7684\u5b9e\u53c2\u3002 #include <stdio.h> void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; printf(\"In swap: *a = %d, *b = %d\\n\", *a, *b); } int main() { int x = 10; int y = 20; swap(&x, &y); printf(\"In main: x = %d, y = %d\\n\", x, y); return 0; } \u6807\u8bb0\u8f93\u5165\u548c\u8f93\u51fa\u53c2\u6570 \u56e0\u4e3a\u4f20\u503c\u901a\u5e38\u662f\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u5b58\u5728\uff0c\u800c\u4f20\u5730\u5740\u7684\u901a\u5e38\u8f93\u51fa\u53c2\u6570\u5b58\u5728\uff0c\u6240\u4ee5\u5b9a\u4e49\u4e24\u4e2a\u5b8f\u6765\u66f4\u597d\u7684\u533a\u5206\u8f93\u5165\u548c\u8f93\u51fa\u53c2\u6570 #define IN #define OUT void add(IN int lhs, IN int rhs, OUT int* res);","title":"\u91cd\u8981\u6982\u5ff5"},{"location":"concepts/#_1","text":"","title":"\u91cd\u8981\u6982\u5ff5"},{"location":"concepts/#_2","text":"\u5728C\u8bed\u8a00\u4e2d\uff0c\u58f0\u660e\u548c\u5b9a\u4e49\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5\u3002\u58f0\u660e\u901a\u5e38\u7528\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u6709\u8fd9\u4e48\u4e00\u4e2a\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5b58\u5728\uff0c\u800c\u5b9a\u4e49\u5219\u662f\u521b\u5efa\u8fd9\u4e2a\u53d8\u91cf\u6216\u8005\u51fd\u6570\u3002 \u58f0\u660e\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\uff0c\u800c\u5b9a\u4e49\u53ea\u80fd\u6709\u4e00\u6b21\u3002 \u58f0\u660e\u901a\u5e38\u653e\u5728\u5934\u6587\u4ef6\u91cc\uff0c\u4f5c\u4e3a\u63a5\u53e3\u6587\u4ef6\u4f7f\u7528\u3002","title":"\u58f0\u660e\u548c\u5b9a\u4e49"},{"location":"concepts/#_3","text":"","title":"\u58f0\u660e\u6709\u5173\u6982\u5ff5"},{"location":"concepts/#storage-class","text":"\u5b58\u50a8\u7c7b\u662fC\u8bed\u8a00\u4e0eC++\u8bed\u8a00\u7684\u6807\u51c6\u4e2d\uff0c\u53d8\u91cf\u4e0e\u51fd\u6570\u7684\u53ef\u8bbf\u95ee\u6027(\u5373\u4f5c\u7528\u57df\u8303\u56f4scope)\u4e0e\u751f\u5b58\u671f(life time)\u3002 \u5b58\u50a8\u7c7b\u53ef\u5206\u4e3a auto \u3001 register \u3001 static \u3001 extern \u3001 thread_local \u7b49\u3002","title":"\u5b58\u50a8\u7c7b\u578b\uff08storage class\uff09"},{"location":"concepts/#type-specifier","text":"\u5982 void \u3001 char \u3001 short \u3001 int \u3001\u7ed3\u6784\u4f53\u7c7b\u578b\u3001\u679a\u4e3e\u7c7b\u578b\u7b49","title":"\u7c7b\u578b\u8bf4\u660e\u7b26\uff08type-specifier\uff09"},{"location":"concepts/#type-qualifier","text":"\u5982 const \u3001 volatile \u3001 restrict","title":"\u7c7b\u578b\u9650\u5b9a\u7b26\uff08type-qualifier\uff09"},{"location":"concepts/#_4","text":"unsigned signed","title":"\u7c7b\u578b\u4fee\u9970\u7b26"},{"location":"concepts/#_5","text":"","title":"\u5b9a\u4e49\u76f8\u5173\u6982\u5ff5"},{"location":"concepts/#_6","text":"\u5728 C \u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u7684\u94fe\u63a5\u65b9\u5f0f\u4e3b\u8981\u5206\u4e3a\u4e09\u79cd\uff1a\u5916\u90e8\u94fe\u63a5\uff08External Linkage\uff09\u3001\u5185\u90e8\u94fe\u63a5\uff08Internal Linkage\uff09 \u548c \u65e0\u94fe\u63a5\uff08No Linkage\uff09\u3002","title":"\u94fe\u63a5\u65b9\u5f0f"},{"location":"concepts/#external-linkage","text":"\u5177\u6709\u5916\u90e8\u94fe\u63a5\u7684\u53d8\u91cf\u53ef\u4ee5\u88ab\u5176\u4ed6\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u8bbf\u95ee\u3002\u4f8b\u5982\u975estatic\u7684\u5168\u5c40\u53d8\u91cf\u3002 // file1.c int global_var = 10; // \u5916\u90e8\u94fe\u63a5 // file2.c extern int global_var; // \u5f15\u7528\u5916\u90e8\u53d8\u91cf","title":"\u5916\u90e8\u94fe\u63a5\uff08External Linkage\uff09"},{"location":"concepts/#internal-linkage","text":"\u5177\u6709\u5185\u90e8\u94fe\u63a5\u7684\u53d8\u91cf\u53ea\u80fd\u5728\u5b9a\u4e49\u5b83\u7684\u6587\u4ef6\u4e2d\u8bbf\u95ee\u3002\u7279\u522b\u662f\u4f7f\u7528 static \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u3002 // file1.c static int internal_var = 20; // \u5185\u90e8\u94fe\u63a5 // file2.c int internal_var; // \u4e0d\u80fd\u8bbf\u95ee","title":"\u5185\u90e8\u94fe\u63a5\uff08Internal Linkage\uff09"},{"location":"concepts/#no-linkage","text":"\u65e0\u94fe\u63a5\u7684\u53d8\u91cf\u5728\u5176\u4f5c\u7528\u57df\u5185\u662f\u552f\u4e00\u7684\uff0c\u65e0\u6cd5\u5728\u5176\u4ed6\u4f5c\u7528\u57df\u4e2d\u8bbf\u95ee\u3002\u4f8b\u5982\u5c40\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u53c2\u6570\u3002 void func() { int local_var = 30; // \u65e0\u94fe\u63a5 // local_var \u53ea\u80fd\u5728 func \u5185\u90e8\u8bbf\u95ee }","title":"\u65e0\u94fe\u63a5\uff08No Linkage\uff09"},{"location":"concepts/#_7","text":"\u53d8\u91cf\u7684\u58f0\u660e\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4e00\u79cd\u662f\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u79f0\u4e3a\u5b9a\u4e49\u6027\u58f0\u660e\uff1b\u53e6\u4e00\u79cd\u662f\u4e0d\u9700\u8981\u5efa\u7acb\u5b58\u50a8\u7a7a\u95f4\u7684\u58f0\u660e\uff0c\u79f0\u4e3a\u5f15\u7528\u6027\u58f0\u660e\u3002 int a = 1; // \u8fd9\u662f\u53d8\u91cf\u7684\u5b9a\u4e49 extern int a; // \u8fd9\u662f\u53d8\u91cf\u7684\u58f0\u660e","title":"\u53d8\u91cf\u7684\u58f0\u660e\u548c\u5b9a\u4e49"},{"location":"concepts/#_8","text":"\u51fd\u6570\u7684\u58f0\u660e\u901a\u5e38\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u800c\u5b9a\u4e49\u5728.c\u6587\u4ef6\u4e2d\u3002 // func.h int add(int a, int b); // \u51fd\u6570\u58f0\u660e // func.c #include \"func.h\" int add(int a, int b) { // \u51fd\u6570\u5b9a\u4e49 return a + b; }","title":"\u51fd\u6570\u7684\u58f0\u660e\u548c\u5b9a\u4e49"},{"location":"concepts/#_9","text":"\u5728C\u8bed\u8a00\u4e2d\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u4f20\u503c\u548c\u4f20\u5740\u3002 \u4f20\u503c\uff08Pass by Value\uff09\uff1a\u51fd\u6570\u5185\u90e8\u5bf9\u53c2\u6570\u8fdb\u884c\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u5916\u90e8\u7684\u5b9e\u53c2\u3002 #include <stdio.h> void swap(int a, int b) { int temp = a; a = b; b = temp; printf(\"In swap: a = %d, b = %d\\n\", a, b); } int main() { int x = 10; int y = 20; swap(x, y); printf(\"In main: x = %d, y = %d\\n\", x, y); return 0; } \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cswap\u51fd\u6570\u7684\u53c2\u6570\u662f\u6309\u7167\u4f20\u503c\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u51fd\u6570\u5185\u90e8\u7684a\u548cb\u53ea\u662f\u5916\u90e8\u5b9e\u53c2x\u548cy\u7684\u62f7\u8d1d\uff0c\u6240\u4ee5\u5373\u4f7f\u5728swap\u51fd\u6570\u5185\u90e8\u5bf9a\u548cb\u8fdb\u884c\u4e86\u4ea4\u6362\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cdx\u548cy\u7684\u503c\u3002 \u4f20\u5740\uff08Pass by Reference\uff09\uff1a\u901a\u8fc7\u6307\u9488\u6216\u8005\u5f15\u7528\u6765\u4f20\u9012\u53c2\u6570\uff0c\u8fd9\u6837\u51fd\u6570\u5185\u90e8\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u5230\u5916\u90e8\u7684\u5b9e\u53c2\u3002 #include <stdio.h> void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; printf(\"In swap: *a = %d, *b = %d\\n\", *a, *b); } int main() { int x = 10; int y = 20; swap(&x, &y); printf(\"In main: x = %d, y = %d\\n\", x, y); return 0; }","title":"\u4f20\u503c\u548c\u4f20\u5730\u5740"},{"location":"concepts/#_10","text":"\u56e0\u4e3a\u4f20\u503c\u901a\u5e38\u662f\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u5b58\u5728\uff0c\u800c\u4f20\u5730\u5740\u7684\u901a\u5e38\u8f93\u51fa\u53c2\u6570\u5b58\u5728\uff0c\u6240\u4ee5\u5b9a\u4e49\u4e24\u4e2a\u5b8f\u6765\u66f4\u597d\u7684\u533a\u5206\u8f93\u5165\u548c\u8f93\u51fa\u53c2\u6570 #define IN #define OUT void add(IN int lhs, IN int rhs, OUT int* res);","title":"\u6807\u8bb0\u8f93\u5165\u548c\u8f93\u51fa\u53c2\u6570"},{"location":"custom_compiler/","text":"\u81ea\u5b9a\u4e49\u7f16\u8bd1\u5668 \u62bd\u8c61\u8bed\u6cd5\u6811 pycparser","title":"\u81ea\u5b9a\u4e49\u7f16\u8bd1\u5668"},{"location":"custom_compiler/#_1","text":"","title":"\u81ea\u5b9a\u4e49\u7f16\u8bd1\u5668"},{"location":"custom_compiler/#_2","text":"","title":"\u62bd\u8c61\u8bed\u6cd5\u6811"},{"location":"custom_compiler/#pycparser","text":"","title":"pycparser"},{"location":"debug/","text":"\u8c03\u8bd5\u65b9\u6cd5 \u65e5\u5fd7 \u65e5\u5fd7\u7ea7\u522b INFO DEBUG WARN ERROR FATAL TRACE \u8c03\u8bd5\u5668 \u901a\u7528\u6982\u5ff5 \u666e\u901a\u65ad\u70b9 \u6761\u4ef6\u65ad\u70b9 \u5355\u6b65\u8c03\u8bd5 \u8df3\u5165\u8df3\u51fa\u51fd\u6570 \u56e0\u4e3a\u6bcf\u4e00\u884cc\u4ee3\u7801\u90fd\u53ef\u80fd\u6709\u591a\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\u65ad\u5728\u4e00\u884c\u4ee3\u7801\u4e0a\uff0c\u8df3\u5165\u7684\u53ef\u80fd\u5e76\u4e0d\u662f\u81ea\u5df1\u671f\u671b\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5148\u8df3\u51fa\uff0c\u7136\u540e\u7ee7\u7eed\u8df3\u5165\uff0c\u76f4\u81f3\u8df3\u5165\u671f\u671b\u7684\u51fd\u6570\u3002 gdb \u666e\u901a\u65ad\u70b9 gdb\u53ef\u4ee5\u65ad\u5728\u67d0\u4e00\u884c\uff0c\u6216\u8005\u67d0\u4e2a\u51fd\u6570\u4e0a\uff0c\u4f7f\u7528\u547d\u4ee4break\uff0c\u6216\u8005n\u3002 \u65ad\u5728\u67d0\u4e00\u884c\uff0c\u4f8b\u5982 b test.c:100 \u65ad\u5728\u67d0\u4e2a\u51fd\u6570\u4e0a\uff0c\u4f8b\u5982 b func \u5355\u6b65\u8c03\u8bd5 \u4f7f\u7528next\u547d\u4ee4\uff0c\u6216\u8005n\u3002 \u8df3\u5165\u8df3\u51fa\u51fd\u6570 \u5bf9\u4e8egdb\u800c\u8a00\uff0c\u8df3\u5165\u51fd\u6570\u4f7f\u7528step\u547d\u4ee4\uff0c\u6216s\u3002\u8df3\u51fa\u51fd\u6570\u4f7f\u7528finish\u547d\u4ee4\uff0c\u6216fin\u3002 lldb windbg","title":"\u8c03\u8bd5\u65b9\u6cd5"},{"location":"debug/#_1","text":"","title":"\u8c03\u8bd5\u65b9\u6cd5"},{"location":"debug/#_2","text":"","title":"\u65e5\u5fd7"},{"location":"debug/#_3","text":"INFO DEBUG WARN ERROR FATAL TRACE","title":"\u65e5\u5fd7\u7ea7\u522b"},{"location":"debug/#_4","text":"","title":"\u8c03\u8bd5\u5668"},{"location":"debug/#_5","text":"","title":"\u901a\u7528\u6982\u5ff5"},{"location":"debug/#_6","text":"","title":"\u666e\u901a\u65ad\u70b9"},{"location":"debug/#_7","text":"","title":"\u6761\u4ef6\u65ad\u70b9"},{"location":"debug/#_8","text":"","title":"\u5355\u6b65\u8c03\u8bd5"},{"location":"debug/#_9","text":"\u56e0\u4e3a\u6bcf\u4e00\u884cc\u4ee3\u7801\u90fd\u53ef\u80fd\u6709\u591a\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\u65ad\u5728\u4e00\u884c\u4ee3\u7801\u4e0a\uff0c\u8df3\u5165\u7684\u53ef\u80fd\u5e76\u4e0d\u662f\u81ea\u5df1\u671f\u671b\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5148\u8df3\u51fa\uff0c\u7136\u540e\u7ee7\u7eed\u8df3\u5165\uff0c\u76f4\u81f3\u8df3\u5165\u671f\u671b\u7684\u51fd\u6570\u3002","title":"\u8df3\u5165\u8df3\u51fa\u51fd\u6570"},{"location":"debug/#gdb","text":"","title":"gdb"},{"location":"debug/#_10","text":"gdb\u53ef\u4ee5\u65ad\u5728\u67d0\u4e00\u884c\uff0c\u6216\u8005\u67d0\u4e2a\u51fd\u6570\u4e0a\uff0c\u4f7f\u7528\u547d\u4ee4break\uff0c\u6216\u8005n\u3002 \u65ad\u5728\u67d0\u4e00\u884c\uff0c\u4f8b\u5982 b test.c:100 \u65ad\u5728\u67d0\u4e2a\u51fd\u6570\u4e0a\uff0c\u4f8b\u5982 b func","title":"\u666e\u901a\u65ad\u70b9"},{"location":"debug/#_11","text":"\u4f7f\u7528next\u547d\u4ee4\uff0c\u6216\u8005n\u3002","title":"\u5355\u6b65\u8c03\u8bd5"},{"location":"debug/#_12","text":"\u5bf9\u4e8egdb\u800c\u8a00\uff0c\u8df3\u5165\u51fd\u6570\u4f7f\u7528step\u547d\u4ee4\uff0c\u6216s\u3002\u8df3\u51fa\u51fd\u6570\u4f7f\u7528finish\u547d\u4ee4\uff0c\u6216fin\u3002","title":"\u8df3\u5165\u8df3\u51fa\u51fd\u6570"},{"location":"debug/#lldb","text":"","title":"lldb"},{"location":"debug/#windbg","text":"","title":"windbg"},{"location":"dynamic_analysis/","text":"\u52a8\u6001\u5206\u6790 sanitizer address sanitizer -fsanitize=address /fsanitize=address leak sanitizer -fsanitize=leak undefine behavior sanitizer thread sanitizer -fsanitize=thread valgrind memcheck valgrind --tools=memcheck -s ./executable arg1 arg2 ... helgrind valgrind --tools=helgrind -s ./executable arg1 arg2 ...","title":"\u52a8\u6001\u5206\u6790"},{"location":"dynamic_analysis/#_1","text":"","title":"\u52a8\u6001\u5206\u6790"},{"location":"dynamic_analysis/#sanitizer","text":"","title":"sanitizer"},{"location":"dynamic_analysis/#address-sanitizer","text":"-fsanitize=address /fsanitize=address","title":"address sanitizer"},{"location":"dynamic_analysis/#leak-sanitizer","text":"-fsanitize=leak","title":"leak sanitizer"},{"location":"dynamic_analysis/#undefine-behavior-sanitizer","text":"","title":"undefine behavior sanitizer"},{"location":"dynamic_analysis/#thread-sanitizer","text":"-fsanitize=thread","title":"thread sanitizer"},{"location":"dynamic_analysis/#valgrind","text":"","title":"valgrind"},{"location":"dynamic_analysis/#memcheck","text":"valgrind --tools=memcheck -s ./executable arg1 arg2 ...","title":"memcheck"},{"location":"dynamic_analysis/#helgrind","text":"valgrind --tools=helgrind -s ./executable arg1 arg2 ...","title":"helgrind"},{"location":"error_handling/","text":"\u9519\u8bef\u5904\u7406 \u4f7f\u7528\u8fd4\u56de\u503c\u548c\u9519\u8bef\u7801 typedef enum { E_OK = 0, E_DOM, E_OVERLOW, E_OOM, E_END } status_code; // \u4e5f\u53ef\u4ee5\u8fd4\u56deint\uff0c\u56e0\u4e3a\u679a\u4e3e\u53ef\u4ee5\u8f6c\u6362\u4e3aint status_code divide(int a, int b, int *result) { if (b == 0) { return E_DOM; // \u8fd4\u56de\u9519\u8bef\u7801 } *result = a / b; return E_OK; } int main() { int result; status_code code = divide(10, 0, &result); if (code == E_OK) { printf(\"Result: %d\\n\", result); } else { printf(\"Error: %d\\n\", code); // \u9519\u8bef\u7801\u8981\u4e00\u76f4\u5411\u4e0a\u8fd4\u56de\uff0c\u76f4\u5230\u4f5c\u4e3a\u8fdb\u7a0b\u8fd4\u56de\u503c return code; } return 0; } \u6790\u6784\u51fd\u6570\u901a\u5e38\u4e0d\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u9632\u6b62\u5d4c\u5957\u9519\u8bef\uff0c\u5982\u679c\u9047\u5230\u9519\u8bef\uff0c\u4e00\u822c\u76f4\u63a5exit \u4f7f\u7528goto \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8c03\u7528divide\u7684\u51fd\u6570\u4e4b\u524d\u5e76\u6ca1\u6709\u7533\u8bf7\u4efb\u4f55\u8d44\u6e90\uff0c\u5982\u679c\u7533\u8bf7\u8d44\u6e90\uff0c\u9700\u8981\u5728return\u4e4b\u524d\u91ca\u653e\u6389\u8fd9\u4e9b\u8d44\u6e90\uff0c\u6ce8\u610f\u9700\u8981\u5728\u6240\u6709return\u4e4b\u524d\u91ca\u653e\u6389\u8fd9\u4e9b\u8d44\u6e90\uff0c\u4f46\u662f\u4e00\u65e6\u7a0b\u5e8f\u7ed3\u6784\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0creturn\u4f1a\u975e\u5e38\u505a\uff0c\u8fd9\u6837\u4f1a\u53d8\u5f97\u975e\u5e38\u96be\u4ee5\u7ef4\u62a4\uff0c\u6240\u4ee5\u901a\u5e38\u5728\u51fd\u6570\u6700\u540e\u7edf\u4e00\u8fd4\u56de\uff0c\u4e00\u65e6\u9047\u5230\u9519\u8bef\u5c31\u8df3\u5230\u51fd\u6570\u6700\u540e\u7684block\u91cc\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86goto\uff0c\u51fd\u6570\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\u5b9a\u4e49\u6700\u597d\u653e\u5728\u51fd\u6570\u5934\u90e8\u3002\u56e0\u4e3aANSI C\u4e0d\u5141\u8bb8\u5728goto\u4e4b\u540e\u5b9a\u4e49\u53d8\u91cf\u3002 int main() { int* result = NULL; FILE* fp = NULL; status_code code = E_OK; result = (int*)malloc(sizeof(int)); if (!result) goto cleanup; fp = fopen(\"log.txt\", \"w\"); if (!fp) goto cleanup; code = divide(10, 0, result); if (code == E_OK) { fprintf(fp, \"Result: %d\\n\", *result); } else { goto cleanup; } cleanup: fprintf(stderr, \"Error: %d\\n\", code); if (result) free(result); if (fp) fclose(fp); // \u6700\u540e\u8fd4\u56decode return code; } TRY/CATCH/CHECK\u5b8f \u4e3a\u4e86\u7b80\u5316\u4e0a\u9762\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u5b9a\u4e49\u51e0\u4e2a\u5b8f #define TRY #define CATCH cleanup: #define CHECK(...) { \\ code = __VA_ARGS__; \\ if (code != E_OK) { \\ fprintf(stderr, \"%s %s:%u code: %d\", __FUNC__, __FILE__, __LINE__, code); \\ goto cleanup; \\ } \\ } #define CHECK_NONULL(ptr) if (!(ptr)) { \\ code = E_OOM; \\ goto cleanup; \\ } int main() { int* result = NULL; FILE* fp = NULL; status_code code = E_OK; TRY { result = (int*)malloc(sizeof(int)); CHECK_NONNULL(result); fp = fopen(\"log.txt\", \"w\"); CHECK_NONNULL(fp); CHECK(divide(10, 0, result)); // \u5df2\u7ecf\u68c0\u67e5\u8fc7\uff0c\u65e0\u9700\u68c0\u67e5 fprintf(fp, \"Result: %d\\n\", *result); } CATCH { if (result) free(result); if (fp) fclose(fp); // \u6700\u540e\u8fd4\u56decode return code; } // \u9632\u6b62warning return 0; } setjump/longjump","title":"\u9519\u8bef\u5904\u7406"},{"location":"error_handling/#_1","text":"","title":"\u9519\u8bef\u5904\u7406"},{"location":"error_handling/#_2","text":"typedef enum { E_OK = 0, E_DOM, E_OVERLOW, E_OOM, E_END } status_code; // \u4e5f\u53ef\u4ee5\u8fd4\u56deint\uff0c\u56e0\u4e3a\u679a\u4e3e\u53ef\u4ee5\u8f6c\u6362\u4e3aint status_code divide(int a, int b, int *result) { if (b == 0) { return E_DOM; // \u8fd4\u56de\u9519\u8bef\u7801 } *result = a / b; return E_OK; } int main() { int result; status_code code = divide(10, 0, &result); if (code == E_OK) { printf(\"Result: %d\\n\", result); } else { printf(\"Error: %d\\n\", code); // \u9519\u8bef\u7801\u8981\u4e00\u76f4\u5411\u4e0a\u8fd4\u56de\uff0c\u76f4\u5230\u4f5c\u4e3a\u8fdb\u7a0b\u8fd4\u56de\u503c return code; } return 0; } \u6790\u6784\u51fd\u6570\u901a\u5e38\u4e0d\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u9632\u6b62\u5d4c\u5957\u9519\u8bef\uff0c\u5982\u679c\u9047\u5230\u9519\u8bef\uff0c\u4e00\u822c\u76f4\u63a5exit","title":"\u4f7f\u7528\u8fd4\u56de\u503c\u548c\u9519\u8bef\u7801"},{"location":"error_handling/#goto","text":"\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8c03\u7528divide\u7684\u51fd\u6570\u4e4b\u524d\u5e76\u6ca1\u6709\u7533\u8bf7\u4efb\u4f55\u8d44\u6e90\uff0c\u5982\u679c\u7533\u8bf7\u8d44\u6e90\uff0c\u9700\u8981\u5728return\u4e4b\u524d\u91ca\u653e\u6389\u8fd9\u4e9b\u8d44\u6e90\uff0c\u6ce8\u610f\u9700\u8981\u5728\u6240\u6709return\u4e4b\u524d\u91ca\u653e\u6389\u8fd9\u4e9b\u8d44\u6e90\uff0c\u4f46\u662f\u4e00\u65e6\u7a0b\u5e8f\u7ed3\u6784\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0creturn\u4f1a\u975e\u5e38\u505a\uff0c\u8fd9\u6837\u4f1a\u53d8\u5f97\u975e\u5e38\u96be\u4ee5\u7ef4\u62a4\uff0c\u6240\u4ee5\u901a\u5e38\u5728\u51fd\u6570\u6700\u540e\u7edf\u4e00\u8fd4\u56de\uff0c\u4e00\u65e6\u9047\u5230\u9519\u8bef\u5c31\u8df3\u5230\u51fd\u6570\u6700\u540e\u7684block\u91cc\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86goto\uff0c\u51fd\u6570\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\u5b9a\u4e49\u6700\u597d\u653e\u5728\u51fd\u6570\u5934\u90e8\u3002\u56e0\u4e3aANSI C\u4e0d\u5141\u8bb8\u5728goto\u4e4b\u540e\u5b9a\u4e49\u53d8\u91cf\u3002 int main() { int* result = NULL; FILE* fp = NULL; status_code code = E_OK; result = (int*)malloc(sizeof(int)); if (!result) goto cleanup; fp = fopen(\"log.txt\", \"w\"); if (!fp) goto cleanup; code = divide(10, 0, result); if (code == E_OK) { fprintf(fp, \"Result: %d\\n\", *result); } else { goto cleanup; } cleanup: fprintf(stderr, \"Error: %d\\n\", code); if (result) free(result); if (fp) fclose(fp); // \u6700\u540e\u8fd4\u56decode return code; }","title":"\u4f7f\u7528goto"},{"location":"error_handling/#trycatchcheck","text":"\u4e3a\u4e86\u7b80\u5316\u4e0a\u9762\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u5b9a\u4e49\u51e0\u4e2a\u5b8f #define TRY #define CATCH cleanup: #define CHECK(...) { \\ code = __VA_ARGS__; \\ if (code != E_OK) { \\ fprintf(stderr, \"%s %s:%u code: %d\", __FUNC__, __FILE__, __LINE__, code); \\ goto cleanup; \\ } \\ } #define CHECK_NONULL(ptr) if (!(ptr)) { \\ code = E_OOM; \\ goto cleanup; \\ } int main() { int* result = NULL; FILE* fp = NULL; status_code code = E_OK; TRY { result = (int*)malloc(sizeof(int)); CHECK_NONNULL(result); fp = fopen(\"log.txt\", \"w\"); CHECK_NONNULL(fp); CHECK(divide(10, 0, result)); // \u5df2\u7ecf\u68c0\u67e5\u8fc7\uff0c\u65e0\u9700\u68c0\u67e5 fprintf(fp, \"Result: %d\\n\", *result); } CATCH { if (result) free(result); if (fp) fclose(fp); // \u6700\u540e\u8fd4\u56decode return code; } // \u9632\u6b62warning return 0; }","title":"TRY/CATCH/CHECK\u5b8f"},{"location":"error_handling/#setjumplongjump","text":"","title":"setjump/longjump"},{"location":"libc/","text":"libc\u5b9e\u73b0\u6d45\u6790 \u7cfb\u7edf\u8c03\u7528 malloc\u6700\u7b80\u5b9e\u73b0 printf\u6700\u7b80\u5b9e\u73b0","title":"libc\u5b9e\u73b0\u6d45\u6790"},{"location":"libc/#libc","text":"","title":"libc\u5b9e\u73b0\u6d45\u6790"},{"location":"libc/#_1","text":"","title":"\u7cfb\u7edf\u8c03\u7528"},{"location":"libc/#malloc","text":"","title":"malloc\u6700\u7b80\u5b9e\u73b0"},{"location":"libc/#printf","text":"","title":"printf\u6700\u7b80\u5b9e\u73b0"},{"location":"macro_vector/","text":"\u4f7f\u7528\u5b8f\u5b9e\u73b0\u901a\u7528vector vector_decl.h #ifndef CTL_VEC_MINIMAL_SIZE #define CTL_VEC_MINIMAL_SIZE 8 #endif #ifndef CTL_VEC_GROW_FACTOR #define CTL_VEC_GROW_FACTOR 2 #endif #ifndef CTL_VEC_TRIM_RATIO #define CTL_VEC_TRIM_RATIO 0.5 #endif #define DECL_VEC(TYPE) \\ typedef struct { \\ TYPE *data; \\ size_t begin_idx; \\ size_t size; \\ size_t capacity; \\ } ctl_vec_##TYPE; \\ size_t ctl_vec_##TYPE##_size(ctl_vec_##TYPE* vec); \\ size_t ctl_vec_##TYPE##_begin_idx(ctl_vec_##TYPE* vec); \\ int ctl_vec_##TYPE##_new(size_t size); \\ void ctl_vec_##TYPE##_free(ctl_vec_##TYPE *vec); \\ int ctl_vec_##TYPE##_ctor_by_size(ctl_vec_##TYPE *vec, size_t size); \\ int ctl_vec_##TYPE##_ctor(ctl_vec_##TYPE *vec); \\ void ctl_vec_##TYPE##_dtor(ctl_vec_##TYPE *vec); \\ int ctl_vec_##TYPE##_copy(ctl_vec_##TYPE *dst, const ctl_vec_##TYPE *src); \\ int ctl_vec_##TYPE##_set_at(ctl_vec_##TYPE *vec, size_t index, const TYPE data); \\ int ctl_vec_##TYPE##_get_at(ctl_vec_##TYPE *vec, size_t index, TYPE* data); \\ int ctl_vec_##TYPE##_push_back(ctl_vec_##TYPE *vec, const TYPE data); \\ int ctl_vec_##TYPE##_pop_back(ctl_vec_##TYPE* vec, TYPE* data); \\ int ctl_vec_##TYPE##_reserve(ctl_vec_##TYPE* vec, size_t new_capacity); \\ int ctl_vec_##TYPE##_resize(ctl_vec_##TYPE* vec, size_t new_size); vector_impl.h #define IMPL_QUAL_VEC(TYPE, QUAL) \\ QUAL size_t ctl_vec_##TYPE##_size(ctl_vec_##TYPE* vec) { \\ return vec->size; \\ } \\ QUAL size_t ctl_vec_##TYPE##_begin_idx(ctl_vec_##TYPE* vec) { \\ return vec->begin_idx; \\ } \\ QUAL int ctl_vec_##TYPE##_ctor_by_size(ctl_vec_##TYPE *vec, size_t size) { \\ int code = 0; \\ TRY { \\ vec->begin_idx = 0; \\ vec->size = size; \\ vec->capacity = size; \\ vec->data = (TYPE *)malloc(vec->capacity * sizeof(TYPE)); \\ CHECK_NONULL(vec->data); \\ /* \u521d\u59cb\u5316\u5c31\u8981\u521d\u59cb\u5316\u6240\u6709\u5206\u914d\u7684\u5185\u5b58 */ \\ for (size_t idx = 0u; idx < vec->capacity; idx++) { \\ CHECK(TYPE##_ctor(vec->data + idx)); \\ } \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_ctor(ctl_vec_##TYPE *vec) { \\ int code = 0; \\ TRY { \\ CHECK(ctl_vec_##TYPE##_ctor_by_size(vec, CTL_VEC_MINIMAL_SIZE)) ; \\ } CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL void ctl_vec_##TYPE##_dtor(ctl_vec_##TYPE *vec) { \\ int code = 0; \\ TRY { /* \u9500\u6bc1\u5c31\u8981\u9500\u6bc1\u6240\u6709\u5206\u914d\u7684\u5185\u5b58 */ \\ for (size_t idx = 0; idx < vec->capacity; idx++) { \\ CHECK(TYPE##_dtor(vec->data + idx)); \\ } \\ free(vec->data); \\ vec->data = NULL; \\ } CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL void ctl_vec_##TYPE##_clear(ctl_vec_##TYPE* vec) { \\ ctl_res_void res = {0}; \\ res.ec = EOK; \\ vec->begin_idx = 0U; \\ vec->size = 0U; \\ return; \\ } \\ QUAL int ctl_vec_##TYPE##_reserve(ctl_vec_##TYPE *vec, size_t new_capacity) { \\ int code = 0; \\ TRY { CHECK_NOT_EQ(new_capacity, 0); \\ if (new_capacity <= vec->capacity) { \\ return code; \\ } \\ vec->capacity = new_capacity; \\ /* \u5148\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u521d\u59cb\u5316 */ \\ TYPE *new_data = (TYPE *)malloc(vec->capacity * sizeof(TYPE)); \\ CHECK_NONNULL(new_data); \\ for (size_t idx = 0u; idx < vec->capacity; idx++) { \\ CHECK(TYPE##_ctor(new_data + idx)); \\ } \\ /* \u628a\u65e7\u7684\u5185\u5bb9\u62f7\u8d1d\u8fc7\u6765 */ \\ for (size_t idx = 0; idx < vec->size; idx++) { \\ CHECK(TYPE##_copy(new_data + idx, vec->data + idx)); \\ } \\ /* \u9500\u6bc1\u6389\u65e7\u7684\u5185\u5bb9 */ \\ for (size_t idx = 0; idx < vec->capacity; idx++) { \\ TYPE##_dtor(vec->data + idx); \\ } \\ free(vec->data); \\ vec->data = new_data; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_resize(ctl_vec_##TYPE *vec, size_t new_size) { \\ int code = 0; \\ TRY { \\ if (vec->begin_idx + new_size > vec->capacity) { \\ CHECK(ctl_vec_##TYPE##_reserve(vec, vec->begin_idx + new_size)); \\ } \\ vec->size = new_size; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_copy(ctl_vec_##TYPE *dst, const ctl_vec_##TYPE *src) { \\ int code = 0; TRY { \\ dst->size = src->size; \\ /* \u5982\u679csrc\u7684capacity\u5df2\u7ecf\u6bd4dst\u7684capacity\u66f4\u5927\uff0c\u90a3dst\u5c31\u8981\u91ca\u653e\u6389\u4e4b\u524d\u7684\u5185\u5b58\uff0c\u7136\u540e\u91cd\u65b0\u7533\u8bf7\u5185\u5b58 */ \\ if (dst->capacity < src->size) { \\ if (dst->data) { \\ /* \u91ca\u653e\u6389dst\u7684\u8d44\u6e90 */ \\ for (size_t idx = 0; idx < dst->capacity; idx++) { \\ TYPE##_dtor(dst->data + idx); \\ } \\ free(dst->data); \\ } \\ /* \u5fc5\u987b\u8981\u6700\u540e\u8d4b\u503c\uff0c\u56e0\u4e3a\u5148\u91ca\u653e\u540e\u7533\u8bf7 */ \\ dst->capacity = src->size; \\ /* \u4e3adst\u7533\u8bf7\u8d44\u6e90\u7136\u540e\u521d\u59cb\u5316 */ \\ dst->data = (TYPE *)malloc(dst->capacity * sizeof(TYPE)); \\ CHECK_COND_RET_RES(dst->data != NULL, EOOM, res); \\ for (size_t idx = 0; idx < src->size; idx++) { \\ CHECK_EXEC_RES_RET_RES(TYPE##_ctor(dst->data + idx), res, res); \\ } \\ } \\ dst->begin_idx = 0; \\ dst->size = src->size; \\ /* \u7136\u540e\u62f7\u8d1d */ \\ for (size_t idx = 0; idx < src->size; idx++) { \\ CHECK(TYPE##_copy(dst->data + idx, src->data + (idx + src->begin_idx))); \\ } \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_get_at(ctl_vec_##TYPE *vec, size_t index, TYPE* data) { \\ int code = 0; \\ TRY { \\ CHECK_INDEX (index, vec->size); \\ CHECK(TYPE##_copy(data, vec->data + (vec->begin_idx + index))); \\ } CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_set_at(ctl_vec_##TYPE *vec, size_t index, const TYPE value) { \\ int code = 0; TRY { \\ CHECK_INDEX (index, vec->size); \\ CHECK(TYPE##_copy(vec->data + (vec->begin_idx + index), &value)); \\ } \\ CATCH { \\ return code; \\ } \\ return res; \\ } \\ QUAL ctl_res_void ctl_vec_##TYPE##_grow(ctl_vec_##TYPE *vec) { \\ ctl_res_void res = {0}; \\ res.ec = EOK; \\ size_t new_capacity = vec->capacity * CTL_VEC_GROW_FACTOR; \\ CHECK_EXEC_RES_RET_RES(ctl_vec_##TYPE##_reserve(vec, new_capacity), res, res); \\ return res; \\ } \\ QUAL int ctl_vec_##TYPE##_push_back(ctl_vec_##TYPE *vec, const TYPE data) { \\ int code = 0; \\ TRY { \\ if (vec->capacity == (vec->begin_idx + vec->size)) { \\ ctl_vec_##TYPE##_grow(vec); \\ } \\ CHECK(TYPE##_copy(vec-> data + (vec->begin_idx + vec->size), &data)); \\ vec->size++; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_pop_back(ctl_vec_##TYPE *vec, TYPE* data) { \\ int code = 0; \\ TRY { \\ CHECK_NOT_EQ (vec->size, 0); \\ CHECK(TYPE##_copy(&(res.value), vec-> data + (vec->begin_idx + vec->size - 1u))); \\ vec->size--; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } #define IMPL_VEC(TYPE) IMPL_QUAL_VEC(TYPE, ) #define IMPL_STATIC_VEC(TYPE) IMPL_QUAL_VEC(TYPE, static) #define IMPL_INLINE_STATIC_VEC(TYPE) IMPL_QUAL_VEC(TYPE, inline static) \u5982\u4f55\u4f7f\u7528 \u5728vector.h\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801 DECL_VEC(int); \u5728vector.c\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801 IMPL_VEC(int);","title":"\u4f7f\u7528\u5b8f\u5b9e\u73b0\u901a\u7528vector"},{"location":"macro_vector/#vector","text":"vector_decl.h #ifndef CTL_VEC_MINIMAL_SIZE #define CTL_VEC_MINIMAL_SIZE 8 #endif #ifndef CTL_VEC_GROW_FACTOR #define CTL_VEC_GROW_FACTOR 2 #endif #ifndef CTL_VEC_TRIM_RATIO #define CTL_VEC_TRIM_RATIO 0.5 #endif #define DECL_VEC(TYPE) \\ typedef struct { \\ TYPE *data; \\ size_t begin_idx; \\ size_t size; \\ size_t capacity; \\ } ctl_vec_##TYPE; \\ size_t ctl_vec_##TYPE##_size(ctl_vec_##TYPE* vec); \\ size_t ctl_vec_##TYPE##_begin_idx(ctl_vec_##TYPE* vec); \\ int ctl_vec_##TYPE##_new(size_t size); \\ void ctl_vec_##TYPE##_free(ctl_vec_##TYPE *vec); \\ int ctl_vec_##TYPE##_ctor_by_size(ctl_vec_##TYPE *vec, size_t size); \\ int ctl_vec_##TYPE##_ctor(ctl_vec_##TYPE *vec); \\ void ctl_vec_##TYPE##_dtor(ctl_vec_##TYPE *vec); \\ int ctl_vec_##TYPE##_copy(ctl_vec_##TYPE *dst, const ctl_vec_##TYPE *src); \\ int ctl_vec_##TYPE##_set_at(ctl_vec_##TYPE *vec, size_t index, const TYPE data); \\ int ctl_vec_##TYPE##_get_at(ctl_vec_##TYPE *vec, size_t index, TYPE* data); \\ int ctl_vec_##TYPE##_push_back(ctl_vec_##TYPE *vec, const TYPE data); \\ int ctl_vec_##TYPE##_pop_back(ctl_vec_##TYPE* vec, TYPE* data); \\ int ctl_vec_##TYPE##_reserve(ctl_vec_##TYPE* vec, size_t new_capacity); \\ int ctl_vec_##TYPE##_resize(ctl_vec_##TYPE* vec, size_t new_size); vector_impl.h #define IMPL_QUAL_VEC(TYPE, QUAL) \\ QUAL size_t ctl_vec_##TYPE##_size(ctl_vec_##TYPE* vec) { \\ return vec->size; \\ } \\ QUAL size_t ctl_vec_##TYPE##_begin_idx(ctl_vec_##TYPE* vec) { \\ return vec->begin_idx; \\ } \\ QUAL int ctl_vec_##TYPE##_ctor_by_size(ctl_vec_##TYPE *vec, size_t size) { \\ int code = 0; \\ TRY { \\ vec->begin_idx = 0; \\ vec->size = size; \\ vec->capacity = size; \\ vec->data = (TYPE *)malloc(vec->capacity * sizeof(TYPE)); \\ CHECK_NONULL(vec->data); \\ /* \u521d\u59cb\u5316\u5c31\u8981\u521d\u59cb\u5316\u6240\u6709\u5206\u914d\u7684\u5185\u5b58 */ \\ for (size_t idx = 0u; idx < vec->capacity; idx++) { \\ CHECK(TYPE##_ctor(vec->data + idx)); \\ } \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_ctor(ctl_vec_##TYPE *vec) { \\ int code = 0; \\ TRY { \\ CHECK(ctl_vec_##TYPE##_ctor_by_size(vec, CTL_VEC_MINIMAL_SIZE)) ; \\ } CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL void ctl_vec_##TYPE##_dtor(ctl_vec_##TYPE *vec) { \\ int code = 0; \\ TRY { /* \u9500\u6bc1\u5c31\u8981\u9500\u6bc1\u6240\u6709\u5206\u914d\u7684\u5185\u5b58 */ \\ for (size_t idx = 0; idx < vec->capacity; idx++) { \\ CHECK(TYPE##_dtor(vec->data + idx)); \\ } \\ free(vec->data); \\ vec->data = NULL; \\ } CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL void ctl_vec_##TYPE##_clear(ctl_vec_##TYPE* vec) { \\ ctl_res_void res = {0}; \\ res.ec = EOK; \\ vec->begin_idx = 0U; \\ vec->size = 0U; \\ return; \\ } \\ QUAL int ctl_vec_##TYPE##_reserve(ctl_vec_##TYPE *vec, size_t new_capacity) { \\ int code = 0; \\ TRY { CHECK_NOT_EQ(new_capacity, 0); \\ if (new_capacity <= vec->capacity) { \\ return code; \\ } \\ vec->capacity = new_capacity; \\ /* \u5148\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u521d\u59cb\u5316 */ \\ TYPE *new_data = (TYPE *)malloc(vec->capacity * sizeof(TYPE)); \\ CHECK_NONNULL(new_data); \\ for (size_t idx = 0u; idx < vec->capacity; idx++) { \\ CHECK(TYPE##_ctor(new_data + idx)); \\ } \\ /* \u628a\u65e7\u7684\u5185\u5bb9\u62f7\u8d1d\u8fc7\u6765 */ \\ for (size_t idx = 0; idx < vec->size; idx++) { \\ CHECK(TYPE##_copy(new_data + idx, vec->data + idx)); \\ } \\ /* \u9500\u6bc1\u6389\u65e7\u7684\u5185\u5bb9 */ \\ for (size_t idx = 0; idx < vec->capacity; idx++) { \\ TYPE##_dtor(vec->data + idx); \\ } \\ free(vec->data); \\ vec->data = new_data; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_resize(ctl_vec_##TYPE *vec, size_t new_size) { \\ int code = 0; \\ TRY { \\ if (vec->begin_idx + new_size > vec->capacity) { \\ CHECK(ctl_vec_##TYPE##_reserve(vec, vec->begin_idx + new_size)); \\ } \\ vec->size = new_size; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_copy(ctl_vec_##TYPE *dst, const ctl_vec_##TYPE *src) { \\ int code = 0; TRY { \\ dst->size = src->size; \\ /* \u5982\u679csrc\u7684capacity\u5df2\u7ecf\u6bd4dst\u7684capacity\u66f4\u5927\uff0c\u90a3dst\u5c31\u8981\u91ca\u653e\u6389\u4e4b\u524d\u7684\u5185\u5b58\uff0c\u7136\u540e\u91cd\u65b0\u7533\u8bf7\u5185\u5b58 */ \\ if (dst->capacity < src->size) { \\ if (dst->data) { \\ /* \u91ca\u653e\u6389dst\u7684\u8d44\u6e90 */ \\ for (size_t idx = 0; idx < dst->capacity; idx++) { \\ TYPE##_dtor(dst->data + idx); \\ } \\ free(dst->data); \\ } \\ /* \u5fc5\u987b\u8981\u6700\u540e\u8d4b\u503c\uff0c\u56e0\u4e3a\u5148\u91ca\u653e\u540e\u7533\u8bf7 */ \\ dst->capacity = src->size; \\ /* \u4e3adst\u7533\u8bf7\u8d44\u6e90\u7136\u540e\u521d\u59cb\u5316 */ \\ dst->data = (TYPE *)malloc(dst->capacity * sizeof(TYPE)); \\ CHECK_COND_RET_RES(dst->data != NULL, EOOM, res); \\ for (size_t idx = 0; idx < src->size; idx++) { \\ CHECK_EXEC_RES_RET_RES(TYPE##_ctor(dst->data + idx), res, res); \\ } \\ } \\ dst->begin_idx = 0; \\ dst->size = src->size; \\ /* \u7136\u540e\u62f7\u8d1d */ \\ for (size_t idx = 0; idx < src->size; idx++) { \\ CHECK(TYPE##_copy(dst->data + idx, src->data + (idx + src->begin_idx))); \\ } \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_get_at(ctl_vec_##TYPE *vec, size_t index, TYPE* data) { \\ int code = 0; \\ TRY { \\ CHECK_INDEX (index, vec->size); \\ CHECK(TYPE##_copy(data, vec->data + (vec->begin_idx + index))); \\ } CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_set_at(ctl_vec_##TYPE *vec, size_t index, const TYPE value) { \\ int code = 0; TRY { \\ CHECK_INDEX (index, vec->size); \\ CHECK(TYPE##_copy(vec->data + (vec->begin_idx + index), &value)); \\ } \\ CATCH { \\ return code; \\ } \\ return res; \\ } \\ QUAL ctl_res_void ctl_vec_##TYPE##_grow(ctl_vec_##TYPE *vec) { \\ ctl_res_void res = {0}; \\ res.ec = EOK; \\ size_t new_capacity = vec->capacity * CTL_VEC_GROW_FACTOR; \\ CHECK_EXEC_RES_RET_RES(ctl_vec_##TYPE##_reserve(vec, new_capacity), res, res); \\ return res; \\ } \\ QUAL int ctl_vec_##TYPE##_push_back(ctl_vec_##TYPE *vec, const TYPE data) { \\ int code = 0; \\ TRY { \\ if (vec->capacity == (vec->begin_idx + vec->size)) { \\ ctl_vec_##TYPE##_grow(vec); \\ } \\ CHECK(TYPE##_copy(vec-> data + (vec->begin_idx + vec->size), &data)); \\ vec->size++; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } \\ QUAL int ctl_vec_##TYPE##_pop_back(ctl_vec_##TYPE *vec, TYPE* data) { \\ int code = 0; \\ TRY { \\ CHECK_NOT_EQ (vec->size, 0); \\ CHECK(TYPE##_copy(&(res.value), vec-> data + (vec->begin_idx + vec->size - 1u))); \\ vec->size--; \\ } \\ CATCH { \\ return code; \\ } \\ return 0; \\ } #define IMPL_VEC(TYPE) IMPL_QUAL_VEC(TYPE, ) #define IMPL_STATIC_VEC(TYPE) IMPL_QUAL_VEC(TYPE, static) #define IMPL_INLINE_STATIC_VEC(TYPE) IMPL_QUAL_VEC(TYPE, inline static) \u5982\u4f55\u4f7f\u7528 \u5728vector.h\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801 DECL_VEC(int); \u5728vector.c\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801 IMPL_VEC(int);","title":"\u4f7f\u7528\u5b8f\u5b9e\u73b0\u901a\u7528vector"},{"location":"macros/","text":"\u91cd\u8981\u7684\u5b8f offsetof offsetof \u662f\u4e00\u4e2a\u5b8f\uff0c\u901a\u5e38\u5728 C \u548c C++ \u7f16\u7a0b\u4e2d\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\u76f8\u5bf9\u4e8e\u7ed3\u6784\u4f53\u8d77\u59cb\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u5b8f\u5728 \u6216\u8005 \u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002\u5b83\u4e3b\u8981\u7528\u4e8e\u4f4e\u7ea7\u7cfb\u7edf\u7f16\u7a0b\u548c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u901a\u8fc7\u8ba1\u7b97\u5730\u5740\u504f\u79fb\uff0c\u53ef\u4ee5\u66f4\u7075\u6d3b\u5730\u64cd\u4f5c\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u3002 \u8bed\u6cd5 #include <stddef.h> offsetof(type, member) type : \u7ed3\u6784\u4f53\u7c7b\u578b\u3002 member : \u9700\u8981\u8ba1\u7b97\u504f\u79fb\u91cf\u7684\u7ed3\u6784\u4f53\u6210\u5458\u7684\u540d\u5b57\u3002 offsetof\u7684\u5b9e\u73b0 offsetof\u5728gcc\u4e0b\u7684\u5b9e\u73b0 #define offsetof(type, member) ((size_t) &((type *)0)->member) \u8fd9\u4e2a\u5b9a\u4e49\u76f4\u63a5\u901a\u8fc7\u89e3\u5f15\u7528\u7a7a\u6307\u9488\u6765\u8bbf\u95ee\u6210\u5458\u53d8\u91cfm\u7684\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u504f\u79fb\u91cf\u3002\u7531\u4e8eC\u8bed\u8a00\u5141\u8bb8\u8fd9\u79cd\u64cd\u4f5c\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u5b58\u5728\u6f5c\u5728\u7684\u98ce\u9669\uff0c\u56e0\u4e3a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u662f\u4e0d\u5b89\u5168\u7684\u200c offsetof\u5728msvc\u4e0b\u7684\u5b9e\u73b0 #define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))) \u5728ANSI C\u4e2d, &((st *)(0))->m \u4e0d\u4f1a\u5bf9 0(NULL) \u771f\u6b63\u7684\u8fdb\u884c\u89e3\u5f15\u7528, \u800c\u4f1a\u76f4\u63a5\u8fd4\u56dem\u7684\u5730\u5740, \u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5bf9NULL\u89e3\u5f15\u7528\u4f1a\u9020\u6210\u7684\u6bb5\u9519\u8bef. \u800c\u5728c++\u4e2d, \u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u89c4\u5219, \u6240\u4ee5\u5982\u679c\u60f3ANSI C\u8fd9\u6837\u5b9e\u73b0 offsetof \u4f1a\u5f15\u8d77\u6bb5\u9519\u8bef. \u4e5f\u77e5\u9053char*\u662f\u5404\u79cdtype\u4e2dstandard\u91cc\u552f\u4e00\u4fdd\u8bc1\u8fc7sizeof\u662f1, \u5176\u5b83\u90fd\u662fimplemention dependent. \u4f7f\u7528volatile\u5173\u952e\u5b57\u662f\u4e3a\u4e86\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u786e\u4fdd\u5728\u7f16\u8bd1\u65f6\u80fd\u591f\u6b63\u786e\u8ba1\u7b97\u504f\u79fb\u91cf\u200c offsetof\u7684\u4f18\u7f3a\u70b9 \u200c\u4f18\u70b9\u200c\uff1a\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\u51fa\u7ed3\u6784\u4f53\u6210\u5458\u7684\u504f\u79fb\u91cf\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\u548c\u51c6\u786e\u6027\u3002 \u200c\u7f3a\u70b9\u200c\uff1a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u5b58\u5728\u4e0d\u5b89\u5168\u56e0\u7d20\uff0c\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5728C++\u4e2d\u76f4\u63a5\u4f7f\u7528\u53ef\u80fd\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 offsetof\u7684\u4f7f\u7528 #include <stddef.h> #ifndef offsetof #define offsetof(type, member) ((size_t) &((type *)0)->member) #endif // \u793a\u4f8b\u4f7f\u7528 struct MyStruct { int a; char b; double c; }; int main() { size_t offset_of_a = offsetof(struct MyStruct, a); size_t offset_of_b = offsetof(struct MyStruct, b); size_t offset_of_c = offsetof(struct MyStruct, c); printf(\"Offset of 'a' is: %zu\\n\", offset_of_a); printf(\"Offset of 'b' is: %zu\\n\", offset_of_b); printf(\"Offset of 'c' is: %zu\\n\", offset_of_c); return 0; } container_of \u200ccontainer_of\u200c \u662f\u4e00\u4e2a\u5728Linux\u5185\u6838\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5b8f\u5b9a\u4e49\uff0c\u4e3b\u8981\u7528\u4e8e\u901a\u8fc7\u7ed3\u6784\u4f53\u6210\u5458\u7684\u5730\u5740\u6765\u83b7\u53d6\u8be5\u7ed3\u6784\u4f53\u7684\u5730\u5740\u3002\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a container_of\u7684\u5b9e\u73b0 #define container_of(ptr, type, member) ({ \\ void *__mptr = (void *)(ptr); \\ ((type *)(__mptr - offsetof(type, member))); \\ }) \u4f7f\u7528\u65b9\u6cd5 container_of\u5b8f\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a ptr \uff1a\u6307\u5411\u7ed3\u6784\u4f53\u6210\u5458\u7684\u6307\u9488\u3002 type \uff1a\u8be5\u6210\u5458\u6240\u5728\u7684\u7ed3\u6784\u4f53\u7684\u7c7b\u578b\u3002 member \uff1a\u7ed3\u6784\u4f53\u4e2d\u6210\u5458\u7684\u540d\u79f0\u3002 \u5b9e\u73b0\u539f\u7406 \u200c\u7c7b\u578b\u68c0\u67e5\u200c\uff1a\u9996\u5148\uff0c\u901a\u8fc7__same_type\u5b8f\u68c0\u67e5ptr\u6307\u5411\u7684\u7c7b\u578b\u662f\u5426\u4e0etype\u7c7b\u578b\u5339\u914d\uff0c\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u3002 \u200c\u8ba1\u7b97\u504f\u79fb\u91cf\u200c\uff1a\u4f7f\u7528offsetof\u5b8f\u8ba1\u7b97\u6210\u5458member\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cf\u3002 \u200c\u6307\u9488\u8f6c\u6362\u200c\uff1a\u6700\u540e\uff0c\u901a\u8fc7\u51cf\u53bb\u504f\u79fb\u91cf\u6765\u8ba1\u7b97\u7ed3\u6784\u4f53\u7684\u5730\u5740\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7c7b\u578b\u3002 container_of\u7684\u793a\u4f8b \u5047\u8bbe\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53struct foo\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6210\u5458\u53d8\u91cfbar\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u7528container_of\uff1a struct foo { int bar; // \u5176\u4ed6\u6210\u5458... }; struct foo *foo_ptr = ...; // \u5047\u8bbe\u5df2\u7ecf\u83b7\u53d6\u5230foo_ptr\u7684\u5730\u5740 int *bar_ptr = &foo_ptr->bar; // \u83b7\u53d6bar\u7684\u5730\u5740 struct foo *foo_struct = container_of(bar_ptr, struct foo, bar); // \u901a\u8fc7bar_ptr\u83b7\u53d6foo_struct\u7684\u5730\u5740","title":"\u91cd\u8981\u7684\u5b8f"},{"location":"macros/#_1","text":"","title":"\u91cd\u8981\u7684\u5b8f"},{"location":"macros/#offsetof","text":"offsetof \u662f\u4e00\u4e2a\u5b8f\uff0c\u901a\u5e38\u5728 C \u548c C++ \u7f16\u7a0b\u4e2d\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\u76f8\u5bf9\u4e8e\u7ed3\u6784\u4f53\u8d77\u59cb\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u5b8f\u5728 \u6216\u8005 \u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002\u5b83\u4e3b\u8981\u7528\u4e8e\u4f4e\u7ea7\u7cfb\u7edf\u7f16\u7a0b\u548c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u901a\u8fc7\u8ba1\u7b97\u5730\u5740\u504f\u79fb\uff0c\u53ef\u4ee5\u66f4\u7075\u6d3b\u5730\u64cd\u4f5c\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u3002 \u8bed\u6cd5 #include <stddef.h> offsetof(type, member) type : \u7ed3\u6784\u4f53\u7c7b\u578b\u3002 member : \u9700\u8981\u8ba1\u7b97\u504f\u79fb\u91cf\u7684\u7ed3\u6784\u4f53\u6210\u5458\u7684\u540d\u5b57\u3002","title":"offsetof"},{"location":"macros/#offsetof_1","text":"","title":"offsetof\u7684\u5b9e\u73b0"},{"location":"macros/#offsetofgcc","text":"#define offsetof(type, member) ((size_t) &((type *)0)->member) \u8fd9\u4e2a\u5b9a\u4e49\u76f4\u63a5\u901a\u8fc7\u89e3\u5f15\u7528\u7a7a\u6307\u9488\u6765\u8bbf\u95ee\u6210\u5458\u53d8\u91cfm\u7684\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u504f\u79fb\u91cf\u3002\u7531\u4e8eC\u8bed\u8a00\u5141\u8bb8\u8fd9\u79cd\u64cd\u4f5c\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u5b58\u5728\u6f5c\u5728\u7684\u98ce\u9669\uff0c\u56e0\u4e3a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u662f\u4e0d\u5b89\u5168\u7684\u200c","title":"offsetof\u5728gcc\u4e0b\u7684\u5b9e\u73b0"},{"location":"macros/#offsetofmsvc","text":"#define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))) \u5728ANSI C\u4e2d, &((st *)(0))->m \u4e0d\u4f1a\u5bf9 0(NULL) \u771f\u6b63\u7684\u8fdb\u884c\u89e3\u5f15\u7528, \u800c\u4f1a\u76f4\u63a5\u8fd4\u56dem\u7684\u5730\u5740, \u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5bf9NULL\u89e3\u5f15\u7528\u4f1a\u9020\u6210\u7684\u6bb5\u9519\u8bef. \u800c\u5728c++\u4e2d, \u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u89c4\u5219, \u6240\u4ee5\u5982\u679c\u60f3ANSI C\u8fd9\u6837\u5b9e\u73b0 offsetof \u4f1a\u5f15\u8d77\u6bb5\u9519\u8bef. \u4e5f\u77e5\u9053char*\u662f\u5404\u79cdtype\u4e2dstandard\u91cc\u552f\u4e00\u4fdd\u8bc1\u8fc7sizeof\u662f1, \u5176\u5b83\u90fd\u662fimplemention dependent. \u4f7f\u7528volatile\u5173\u952e\u5b57\u662f\u4e3a\u4e86\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u786e\u4fdd\u5728\u7f16\u8bd1\u65f6\u80fd\u591f\u6b63\u786e\u8ba1\u7b97\u504f\u79fb\u91cf\u200c","title":"offsetof\u5728msvc\u4e0b\u7684\u5b9e\u73b0"},{"location":"macros/#offsetof_2","text":"\u200c\u4f18\u70b9\u200c\uff1a\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\u51fa\u7ed3\u6784\u4f53\u6210\u5458\u7684\u504f\u79fb\u91cf\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\u548c\u51c6\u786e\u6027\u3002 \u200c\u7f3a\u70b9\u200c\uff1a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u5b58\u5728\u4e0d\u5b89\u5168\u56e0\u7d20\uff0c\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5728C++\u4e2d\u76f4\u63a5\u4f7f\u7528\u53ef\u80fd\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002","title":"offsetof\u7684\u4f18\u7f3a\u70b9"},{"location":"macros/#offsetof_3","text":"#include <stddef.h> #ifndef offsetof #define offsetof(type, member) ((size_t) &((type *)0)->member) #endif // \u793a\u4f8b\u4f7f\u7528 struct MyStruct { int a; char b; double c; }; int main() { size_t offset_of_a = offsetof(struct MyStruct, a); size_t offset_of_b = offsetof(struct MyStruct, b); size_t offset_of_c = offsetof(struct MyStruct, c); printf(\"Offset of 'a' is: %zu\\n\", offset_of_a); printf(\"Offset of 'b' is: %zu\\n\", offset_of_b); printf(\"Offset of 'c' is: %zu\\n\", offset_of_c); return 0; }","title":"offsetof\u7684\u4f7f\u7528"},{"location":"macros/#container_of","text":"\u200ccontainer_of\u200c \u662f\u4e00\u4e2a\u5728Linux\u5185\u6838\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5b8f\u5b9a\u4e49\uff0c\u4e3b\u8981\u7528\u4e8e\u901a\u8fc7\u7ed3\u6784\u4f53\u6210\u5458\u7684\u5730\u5740\u6765\u83b7\u53d6\u8be5\u7ed3\u6784\u4f53\u7684\u5730\u5740\u3002\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a","title":"container_of"},{"location":"macros/#container_of_1","text":"#define container_of(ptr, type, member) ({ \\ void *__mptr = (void *)(ptr); \\ ((type *)(__mptr - offsetof(type, member))); \\ }) \u4f7f\u7528\u65b9\u6cd5 container_of\u5b8f\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a ptr \uff1a\u6307\u5411\u7ed3\u6784\u4f53\u6210\u5458\u7684\u6307\u9488\u3002 type \uff1a\u8be5\u6210\u5458\u6240\u5728\u7684\u7ed3\u6784\u4f53\u7684\u7c7b\u578b\u3002 member \uff1a\u7ed3\u6784\u4f53\u4e2d\u6210\u5458\u7684\u540d\u79f0\u3002 \u5b9e\u73b0\u539f\u7406 \u200c\u7c7b\u578b\u68c0\u67e5\u200c\uff1a\u9996\u5148\uff0c\u901a\u8fc7__same_type\u5b8f\u68c0\u67e5ptr\u6307\u5411\u7684\u7c7b\u578b\u662f\u5426\u4e0etype\u7c7b\u578b\u5339\u914d\uff0c\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u3002 \u200c\u8ba1\u7b97\u504f\u79fb\u91cf\u200c\uff1a\u4f7f\u7528offsetof\u5b8f\u8ba1\u7b97\u6210\u5458member\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cf\u3002 \u200c\u6307\u9488\u8f6c\u6362\u200c\uff1a\u6700\u540e\uff0c\u901a\u8fc7\u51cf\u53bb\u504f\u79fb\u91cf\u6765\u8ba1\u7b97\u7ed3\u6784\u4f53\u7684\u5730\u5740\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7c7b\u578b\u3002","title":"container_of\u7684\u5b9e\u73b0"},{"location":"macros/#container_of_2","text":"\u5047\u8bbe\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53struct foo\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6210\u5458\u53d8\u91cfbar\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u7528container_of\uff1a struct foo { int bar; // \u5176\u4ed6\u6210\u5458... }; struct foo *foo_ptr = ...; // \u5047\u8bbe\u5df2\u7ecf\u83b7\u53d6\u5230foo_ptr\u7684\u5730\u5740 int *bar_ptr = &foo_ptr->bar; // \u83b7\u53d6bar\u7684\u5730\u5740 struct foo *foo_struct = container_of(bar_ptr, struct foo, bar); // \u901a\u8fc7bar_ptr\u83b7\u53d6foo_struct\u7684\u5730\u5740","title":"container_of\u7684\u793a\u4f8b"},{"location":"object_oriented/","text":"\u9762\u5411\u5bf9\u8c61 \u5c01\u88c5 \u62bd\u8c61 enum gender_s { MALE, FEMALE } gender_t; typedef struct person_s { gender_t gender; unsigned int age; const char* name; } person; person tom; self/this \u6307\u9488 void set_gender(person* self, geneder_s gender) { self->gender = gender; } void set_age(person* self, unsigned int age) { self->age = age; } set_gender(&tom, MALE); \u6784\u9020\u3001\u62f7\u8d1d\u3001\u6790\u6784\u51fd\u6570 \u6784\u9020\u51fd\u6570 void person_ctor_by_gender_age_name(person* self, gender_t gender, unsigned int age, const char* name) { self->gender = gender; self->age = age; self->name = name; } // \u4f7f\u7528\u6784\u9020\u51fd\u6570 #define NEW_PERSON_BY_GENDER_AGE_NAME(gender, age, name) ({ \\ person* someone = (person*)malloc(sizeof(person)); \\ person_ctor_by_gender_age_name(someone, gender, age, name); \\ someone; \\ }) person* tom = NEW_PERSON_BY_GENDER_AGE_NAME(MALE, 18, \"tom\"); \u6790\u6784\u51fd\u6570 \u6790\u6784\u51fd\u6570\u9664\u4e86self\u6307\u9488\u901a\u5e38\u6ca1\u6709\u53c2\u6570\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8eC\u8bed\u8a00\u6ca1\u6709raii\uff0c\u6790\u6784\u51fd\u6570\u5fc5\u987b\u624b\u52a8\u8c03\u7528\u3002 void person_dtor(person* self) { printf(\"person destructor\\n\"); } // \u4f7f\u7528\u6790\u6784\u51fd\u6570 #define DEL_PERSON(someone) { \\ person_dtor(someone); \\ free(someone); \\ } DEL_PERSON(tom); \u62f7\u8d1d\u51fd\u6570 \u62f7\u8d1d\u51fd\u6570\u901a\u5e38\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e3a\u76ee\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u53e6\u4e00\u4e2a\u662f\u6e90\u7ed3\u6784\u4f53\u7684\u6307\u9488 void person_copy(person* dst, const person* src) { dst->gender = src->gender; dst->age = src->age; dst->name = src->name; } person* jerry = ...; person_copy(jerry, tom); \u53ef\u89c1\u6027 \u901a\u5e38\u9700\u8981\u5bf9\u5916\u66b4\u9732\u7684\u65b9\u6cd5\u58f0\u660e\u5934\u6587\u4ef6\u91cc\u3002\u4e0d\u9700\u8981\u5bf9\u5916\u66b4\u9732\uff0c\u4ec5\u4ec5\u5728\u5185\u90e8\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u76f4\u63a5\u5b9a\u4e49\u5728\u6e90\u6587\u4ef6\u91cc\u3002 person.h void person_speak(person* self, const char* msg); person.c // \u4e0d\u5bf9\u5916\u58f0\u660e\uff0c\u4ec5\u5728c\u6587\u4ef6\u91cc\u5b9a\u4e49 void internal_person_speak(person* self, const char* greeting, const char* msg) { printf(\"%s\\n\", greeting); printf(\"%s\\n\", msg); } void person_speak(person* self, const char* msg) { internal_person_speak(self, \"how are you\", msg); } \u7ee7\u627f \u5355\u4e00\u7ee7\u627f \u5728\u5355\u7ee7\u627f\u7684\u60c5\u51b5\u4e0b\uff0c \u901a\u5e38\u5c06\u7236\u7c7b\u4f5c\u4e3a\u5b50\u7c7b\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\uff0c\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u5b50\u5bf9\u8c61\u548c\u7236\u5bf9\u8c61\u7684\u9996\u5730\u5740\u662f\u76f8\u540c\u7684\u3002 typedef man_s { person super; int id; } man; man tom; &tom \u548c &tom.super \u662f\u540c\u4e00\u5730\u5740\uff0c\u8fd9\u6837\u65b9\u4fbf\u8f6c\u6362\u3002 \u5b50\u7c7b\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4f7f\u7528\u7236\u7c7b\u7684\u65b9\u6cd5 void set_age(man* self, unsigned int age) { // \u8c03\u7528\u7236\u7c7b\u65b9\u6cd5 set_age(&self->super, age); } \u591a\u7ee7\u627f typedef struct object_s { int id; } object; typedef struct man_s { person super1; object super2; } man; \u5411\u4e0a\u8f6c\u6362 object* super = (object*)((char*)someone + offsetof(man, super2)); \u5411\u4e0b\u8f6c\u6362 man* someone = (man*)((char*)super - offsetof(man, super2)); \u591a\u6001 \u5728\u7f16\u7a0b\u8bed\u8a00\u548c\u7c7b\u578b\u8bba\u4e2d\uff0c\u591a\u6001\uff08\u82f1\u8bed\uff1apolymorphism\uff09\u6307\u4e3a\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f53\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\u3002 \u591a\u6001\u7c7b\u578b\uff08\u82f1\u8bed\uff1apolymorphic type\uff09\u53ef\u4ee5\u5c06\u81ea\u8eab\u6240\u652f\u6301\u7684\u64cd\u4f5c\u5957\u7528\u5230\u5176\u5b83\u7c7b\u578b\u7684\u503c\u4e0a\u3002 \u591a\u6001\u7684\u5b58\u5728\u5177\u6709\u54f2\u5b66\u610f\u4e49\uff0c\u5b83\u610f\u5473\u7740\u5177\u6709\u76f8\u4f3c\u5916\u89c2\u7684\u4e8b\u7269\u5177\u6709\u76f8\u4f3c\u7684\u884c\u4e3a\uff0c\u4f46\u662f\u884c\u4e3a\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u540c\u3002 \u76f8\u4f3c\u7684\u5916\u89c2\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u88ab\u5b58\u653e\u5230\u4e00\u8d77\u3002 \u76f8\u4f3c\u7684\u884c\u4e3a\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u8c03\u7528\u65b9\u6cd5\u3002 \u4e0d\u540c\u7684\u884c\u4e3a\u7ed3\u679c\u610f\u5473\u7740\u8fd9\u4e9b\u884c\u4e3a\u7684\u5b9e\u73b0\u5e76\u4e0d\u4e00\u6837\u3002 \u865a\u51fd\u6570\u5b9e\u73b0 \u8fd9\u91cc\u7684\u6280\u5de7\u548c\u5355\u7ee7\u627f\u4e00\u6837\uff0c\u5b50\u7c7b\u5728\u865a\u7ee7\u627f\u7684\u65f6\u5019\u9700\u5c06\u7236\u7c7b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6210\u5458 \u3002 \u8fd9\u91cc\u6709\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u5728\u865a\u7ee7\u627f\u7684\u60c5\u51b5\u4e0b\uff0c\u6790\u6784\u51fd\u6570\u5fc5\u987b\u4e3a\u865a\u51fd\u6570\uff0c\u56e0\u4e3a\u5f53\u8c03\u7528\u6790\u6784\u51fd\u6570\u7684\u65f6\u5019\uff0cself\u6307\u9488\u7684\u7c7b\u578b\u5df2\u7ecf\u4e0d\u77e5\u9053\u4e86\uff0c\u8fd9\u662f\u65e0\u6cd5\u901a\u8fc7\u7c7b\u578b\u8c03\u7528\u5230\u6b63\u786e\u7684\u6790\u6784\u51fd\u6570\u4e0a\uff0c\u53ea\u80fd\u4f7f\u7528\u865a\u51fd\u6570\u3002 typedef void (sound_func_t*)(); typedef struct animal_s { sound_func_t sound; } animal; void animal_sound() { printf(\"~~~\\n\"); } void animal_ctor(animal* self) { self->sound = animal_sound; } typedef struct dog_s { animal super; } dog; void dog_sound() { printf(\"wow\\n\"); } void dog_ctor(dog* self) { self->super.sound = dog_sound; } typedef struct cat_s { animal super; } cat; void cat_sound() { printf(\"meow\\n\"); } void cat_ctor(cat* self) { cat->super.sound = cat_sound; } animal* tom = (animal*)NEW_CAT(); animal* spike = (animal*)NEW_DOG(); tom->sound(); spike->sound(); // \u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u4e0d\u77e5\u9053tom\u548cspike\u7684\u5177\u4f53\u7c7b\u578b\u4e86\uff0c\u56e0\u4e3a\u53ef\u80fd\u662f\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u91cc\u8c03\u7528\u7684 DEL_ANIMAL(tom); DEL_ANIMAL(spike); \u4e00\u822c\u6027\u7684\u8868\u9a71\u52a8 \u8fd9\u91cc\u7684\u5173\u952e\u662f\u5b9a\u4e49type_code\uff0c\u5e76\u8ba9\u5b83\u4f5c\u4e3a\u6240\u6709\u5b50\u7c7b\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\uff0c\u8fd9\u76f8\u5f53\u4e8ec++\u7684type_info\uff0c\u4f46\u662f\u5728\u5185\u5b58\u5360\u7528\u4e0a\u66f4\u4f18\uff0c\u5982\u679c\u5bf9\u8c61\u975e\u5e38\u591a\uff0c\u8fd9\u4e5f\u662f\u4e0d\u5c0f\u7684\u4f18\u5316\u3002\u6bd4\u5982\u5728\u6e32\u67d3\u5f15\u64ce\u4e2d\uff0cdom\u5143\u7d20\u4f1a\u53d1\u51fa\u591a\uff0c\u6bcf\u4e00\u4e2a\u90fd\u6301\u6709\u865a\u8868\u6307\u9488\uff0c\u8fd9\u6837\u4f1a\u9020\u6210\u6d6a\u8d39\u3002type_code\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u8868\u4e4b\u95f4\u5171\u7528\uff0c\u8fd9\u4e5f\u662f\u5b83\u7684\u4f18\u52bf\u3002 typedef void* animal_handle; typedef enum { DOG, CAT, NONE } animal_code; typedef struct { animal_code code; sound_func_t sound; } sound_method; sound_method sound_methods[] = { {DOG, dog_sound}, {CAT, cat_sound}, {NONE, animal_sound} } typedef struct animal_s { animal_code code; } animal; void animal_ctor(animal* self) { self->code = NONE; } typedef struct dog_s { animal_code code; } dog; void dog_ctor(dog* self) { self->code = DOG; } typedef struct cat_s { animal_code code; } cat; void cat_ctor(cat* self) { self->code = CAT; } #define LOOKUP_SOUND_METHOD(code) ({ \\ sound_func_t __sound = NULL; \\ for (unsigned int i = 0u; i < sizeof(sound_methods) / sizeof(sound_methods[0]); i++) { \\ if (sound_methouds[i].code == code) { \\ __sound = sound_methods[i].soound; \\ break; \\ } \\ } \\ __sound; \\ }) #define CALL_SOUND_METHOD(handle) { \\ animal_code __code = *(animal_code*)handle; \\ sound_func_t __sound = LOOKUP_SOUND_METHOD(__code); \\ __sound(); \\ } animal_handle tom = (animal_handle)NEW_CAT(); animal_handle spike = (animal_handle)NEW_DOG(); CALL_SOUND_METHOD(tom); CALL_SOUND_METHOD(spike); // \u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u4e0d\u77e5\u9053tom\u548cspike\u7684\u5177\u4f53\u7c7b\u578b\u4e86\uff0c\u56e0\u4e3a\u53ef\u80fd\u662f\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u91cc\u8c03\u7528\u7684 DEL_ANIMAL(tom); DEL_ANIMAL(spike); \u865a\u8868\u5b9e\u73b0","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"object_oriented/#_1","text":"","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"object_oriented/#_2","text":"","title":"\u5c01\u88c5"},{"location":"object_oriented/#_3","text":"enum gender_s { MALE, FEMALE } gender_t; typedef struct person_s { gender_t gender; unsigned int age; const char* name; } person; person tom;","title":"\u62bd\u8c61"},{"location":"object_oriented/#selfthis","text":"void set_gender(person* self, geneder_s gender) { self->gender = gender; } void set_age(person* self, unsigned int age) { self->age = age; } set_gender(&tom, MALE);","title":"self/this \u6307\u9488"},{"location":"object_oriented/#_4","text":"","title":"\u6784\u9020\u3001\u62f7\u8d1d\u3001\u6790\u6784\u51fd\u6570"},{"location":"object_oriented/#_5","text":"void person_ctor_by_gender_age_name(person* self, gender_t gender, unsigned int age, const char* name) { self->gender = gender; self->age = age; self->name = name; } // \u4f7f\u7528\u6784\u9020\u51fd\u6570 #define NEW_PERSON_BY_GENDER_AGE_NAME(gender, age, name) ({ \\ person* someone = (person*)malloc(sizeof(person)); \\ person_ctor_by_gender_age_name(someone, gender, age, name); \\ someone; \\ }) person* tom = NEW_PERSON_BY_GENDER_AGE_NAME(MALE, 18, \"tom\");","title":"\u6784\u9020\u51fd\u6570"},{"location":"object_oriented/#_6","text":"\u6790\u6784\u51fd\u6570\u9664\u4e86self\u6307\u9488\u901a\u5e38\u6ca1\u6709\u53c2\u6570\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8eC\u8bed\u8a00\u6ca1\u6709raii\uff0c\u6790\u6784\u51fd\u6570\u5fc5\u987b\u624b\u52a8\u8c03\u7528\u3002 void person_dtor(person* self) { printf(\"person destructor\\n\"); } // \u4f7f\u7528\u6790\u6784\u51fd\u6570 #define DEL_PERSON(someone) { \\ person_dtor(someone); \\ free(someone); \\ } DEL_PERSON(tom);","title":"\u6790\u6784\u51fd\u6570"},{"location":"object_oriented/#_7","text":"\u62f7\u8d1d\u51fd\u6570\u901a\u5e38\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e3a\u76ee\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u53e6\u4e00\u4e2a\u662f\u6e90\u7ed3\u6784\u4f53\u7684\u6307\u9488 void person_copy(person* dst, const person* src) { dst->gender = src->gender; dst->age = src->age; dst->name = src->name; } person* jerry = ...; person_copy(jerry, tom);","title":"\u62f7\u8d1d\u51fd\u6570"},{"location":"object_oriented/#_8","text":"\u901a\u5e38\u9700\u8981\u5bf9\u5916\u66b4\u9732\u7684\u65b9\u6cd5\u58f0\u660e\u5934\u6587\u4ef6\u91cc\u3002\u4e0d\u9700\u8981\u5bf9\u5916\u66b4\u9732\uff0c\u4ec5\u4ec5\u5728\u5185\u90e8\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u76f4\u63a5\u5b9a\u4e49\u5728\u6e90\u6587\u4ef6\u91cc\u3002 person.h void person_speak(person* self, const char* msg); person.c // \u4e0d\u5bf9\u5916\u58f0\u660e\uff0c\u4ec5\u5728c\u6587\u4ef6\u91cc\u5b9a\u4e49 void internal_person_speak(person* self, const char* greeting, const char* msg) { printf(\"%s\\n\", greeting); printf(\"%s\\n\", msg); } void person_speak(person* self, const char* msg) { internal_person_speak(self, \"how are you\", msg); }","title":"\u53ef\u89c1\u6027"},{"location":"object_oriented/#_9","text":"","title":"\u7ee7\u627f"},{"location":"object_oriented/#_10","text":"\u5728\u5355\u7ee7\u627f\u7684\u60c5\u51b5\u4e0b\uff0c \u901a\u5e38\u5c06\u7236\u7c7b\u4f5c\u4e3a\u5b50\u7c7b\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\uff0c\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u5b50\u5bf9\u8c61\u548c\u7236\u5bf9\u8c61\u7684\u9996\u5730\u5740\u662f\u76f8\u540c\u7684\u3002 typedef man_s { person super; int id; } man; man tom; &tom \u548c &tom.super \u662f\u540c\u4e00\u5730\u5740\uff0c\u8fd9\u6837\u65b9\u4fbf\u8f6c\u6362\u3002 \u5b50\u7c7b\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u4f7f\u7528\u7236\u7c7b\u7684\u65b9\u6cd5 void set_age(man* self, unsigned int age) { // \u8c03\u7528\u7236\u7c7b\u65b9\u6cd5 set_age(&self->super, age); }","title":"\u5355\u4e00\u7ee7\u627f"},{"location":"object_oriented/#_11","text":"typedef struct object_s { int id; } object; typedef struct man_s { person super1; object super2; } man;","title":"\u591a\u7ee7\u627f"},{"location":"object_oriented/#_12","text":"object* super = (object*)((char*)someone + offsetof(man, super2));","title":"\u5411\u4e0a\u8f6c\u6362"},{"location":"object_oriented/#_13","text":"man* someone = (man*)((char*)super - offsetof(man, super2));","title":"\u5411\u4e0b\u8f6c\u6362"},{"location":"object_oriented/#_14","text":"\u5728\u7f16\u7a0b\u8bed\u8a00\u548c\u7c7b\u578b\u8bba\u4e2d\uff0c\u591a\u6001\uff08\u82f1\u8bed\uff1apolymorphism\uff09\u6307\u4e3a\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u4f53\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\u3002 \u591a\u6001\u7c7b\u578b\uff08\u82f1\u8bed\uff1apolymorphic type\uff09\u53ef\u4ee5\u5c06\u81ea\u8eab\u6240\u652f\u6301\u7684\u64cd\u4f5c\u5957\u7528\u5230\u5176\u5b83\u7c7b\u578b\u7684\u503c\u4e0a\u3002 \u591a\u6001\u7684\u5b58\u5728\u5177\u6709\u54f2\u5b66\u610f\u4e49\uff0c\u5b83\u610f\u5473\u7740\u5177\u6709\u76f8\u4f3c\u5916\u89c2\u7684\u4e8b\u7269\u5177\u6709\u76f8\u4f3c\u7684\u884c\u4e3a\uff0c\u4f46\u662f\u884c\u4e3a\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u540c\u3002 \u76f8\u4f3c\u7684\u5916\u89c2\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u88ab\u5b58\u653e\u5230\u4e00\u8d77\u3002 \u76f8\u4f3c\u7684\u884c\u4e3a\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u8c03\u7528\u65b9\u6cd5\u3002 \u4e0d\u540c\u7684\u884c\u4e3a\u7ed3\u679c\u610f\u5473\u7740\u8fd9\u4e9b\u884c\u4e3a\u7684\u5b9e\u73b0\u5e76\u4e0d\u4e00\u6837\u3002","title":"\u591a\u6001"},{"location":"object_oriented/#_15","text":"\u8fd9\u91cc\u7684\u6280\u5de7\u548c\u5355\u7ee7\u627f\u4e00\u6837\uff0c\u5b50\u7c7b\u5728\u865a\u7ee7\u627f\u7684\u65f6\u5019\u9700\u5c06\u7236\u7c7b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6210\u5458 \u3002 \u8fd9\u91cc\u6709\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u5728\u865a\u7ee7\u627f\u7684\u60c5\u51b5\u4e0b\uff0c\u6790\u6784\u51fd\u6570\u5fc5\u987b\u4e3a\u865a\u51fd\u6570\uff0c\u56e0\u4e3a\u5f53\u8c03\u7528\u6790\u6784\u51fd\u6570\u7684\u65f6\u5019\uff0cself\u6307\u9488\u7684\u7c7b\u578b\u5df2\u7ecf\u4e0d\u77e5\u9053\u4e86\uff0c\u8fd9\u662f\u65e0\u6cd5\u901a\u8fc7\u7c7b\u578b\u8c03\u7528\u5230\u6b63\u786e\u7684\u6790\u6784\u51fd\u6570\u4e0a\uff0c\u53ea\u80fd\u4f7f\u7528\u865a\u51fd\u6570\u3002 typedef void (sound_func_t*)(); typedef struct animal_s { sound_func_t sound; } animal; void animal_sound() { printf(\"~~~\\n\"); } void animal_ctor(animal* self) { self->sound = animal_sound; } typedef struct dog_s { animal super; } dog; void dog_sound() { printf(\"wow\\n\"); } void dog_ctor(dog* self) { self->super.sound = dog_sound; } typedef struct cat_s { animal super; } cat; void cat_sound() { printf(\"meow\\n\"); } void cat_ctor(cat* self) { cat->super.sound = cat_sound; } animal* tom = (animal*)NEW_CAT(); animal* spike = (animal*)NEW_DOG(); tom->sound(); spike->sound(); // \u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u4e0d\u77e5\u9053tom\u548cspike\u7684\u5177\u4f53\u7c7b\u578b\u4e86\uff0c\u56e0\u4e3a\u53ef\u80fd\u662f\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u91cc\u8c03\u7528\u7684 DEL_ANIMAL(tom); DEL_ANIMAL(spike);","title":"\u865a\u51fd\u6570\u5b9e\u73b0"},{"location":"object_oriented/#_16","text":"\u8fd9\u91cc\u7684\u5173\u952e\u662f\u5b9a\u4e49type_code\uff0c\u5e76\u8ba9\u5b83\u4f5c\u4e3a\u6240\u6709\u5b50\u7c7b\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\uff0c\u8fd9\u76f8\u5f53\u4e8ec++\u7684type_info\uff0c\u4f46\u662f\u5728\u5185\u5b58\u5360\u7528\u4e0a\u66f4\u4f18\uff0c\u5982\u679c\u5bf9\u8c61\u975e\u5e38\u591a\uff0c\u8fd9\u4e5f\u662f\u4e0d\u5c0f\u7684\u4f18\u5316\u3002\u6bd4\u5982\u5728\u6e32\u67d3\u5f15\u64ce\u4e2d\uff0cdom\u5143\u7d20\u4f1a\u53d1\u51fa\u591a\uff0c\u6bcf\u4e00\u4e2a\u90fd\u6301\u6709\u865a\u8868\u6307\u9488\uff0c\u8fd9\u6837\u4f1a\u9020\u6210\u6d6a\u8d39\u3002type_code\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u8868\u4e4b\u95f4\u5171\u7528\uff0c\u8fd9\u4e5f\u662f\u5b83\u7684\u4f18\u52bf\u3002 typedef void* animal_handle; typedef enum { DOG, CAT, NONE } animal_code; typedef struct { animal_code code; sound_func_t sound; } sound_method; sound_method sound_methods[] = { {DOG, dog_sound}, {CAT, cat_sound}, {NONE, animal_sound} } typedef struct animal_s { animal_code code; } animal; void animal_ctor(animal* self) { self->code = NONE; } typedef struct dog_s { animal_code code; } dog; void dog_ctor(dog* self) { self->code = DOG; } typedef struct cat_s { animal_code code; } cat; void cat_ctor(cat* self) { self->code = CAT; } #define LOOKUP_SOUND_METHOD(code) ({ \\ sound_func_t __sound = NULL; \\ for (unsigned int i = 0u; i < sizeof(sound_methods) / sizeof(sound_methods[0]); i++) { \\ if (sound_methouds[i].code == code) { \\ __sound = sound_methods[i].soound; \\ break; \\ } \\ } \\ __sound; \\ }) #define CALL_SOUND_METHOD(handle) { \\ animal_code __code = *(animal_code*)handle; \\ sound_func_t __sound = LOOKUP_SOUND_METHOD(__code); \\ __sound(); \\ } animal_handle tom = (animal_handle)NEW_CAT(); animal_handle spike = (animal_handle)NEW_DOG(); CALL_SOUND_METHOD(tom); CALL_SOUND_METHOD(spike); // \u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u4e0d\u77e5\u9053tom\u548cspike\u7684\u5177\u4f53\u7c7b\u578b\u4e86\uff0c\u56e0\u4e3a\u53ef\u80fd\u662f\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u91cc\u8c03\u7528\u7684 DEL_ANIMAL(tom); DEL_ANIMAL(spike);","title":"\u4e00\u822c\u6027\u7684\u8868\u9a71\u52a8"},{"location":"object_oriented/#_17","text":"","title":"\u865a\u8868\u5b9e\u73b0"},{"location":"opaque_pointer_vector/","text":"\u4f7f\u7528void*\u5b9e\u73b0\u901a\u7528vector icd\u51fd\u6570 typedef int (ctor_func_t*)(void*); typedef int (copy_func_t*)(void*, void*); // \u6790\u6784\u51fd\u6570\u901a\u5e38\u4e0d\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u9632\u6b62\u5d4c\u5957\u9519\u8bef\uff0c\u5982\u679c\u9047\u5230\u9519\u8bef\uff0c\u4e00\u822c\u76f4\u63a5exit typedef void (dtor_func_t*)(void*); typedef struct icd_s { size_t size; ctor_func_t ctor; copy_func_t copy; dtor_func_t dtor; } icd_t; typedef struct vector_s { void *data; size_t begin_idx; size_t size; size_t capacity; // element\u7684icd\u51fd\u6570 icd_t icd; } vector; size_t vector_size(vector* vec) { return vec->size; } size_t vector_begin_idx(vector* vec) { return vec->begin_idx; } int vector_ctor_by_size(vector *vec, size_t size) { int code = 0; TRY { vec->begin_idx = 0; vec->size = size; vec->capacity = size; vec->data = malloc(vec->capacity * vec->icd.size); CHECK_NONNULL(vec->data) /* \u521d\u59cb\u5316\u5c31\u8981\u521d\u59cb\u5316\u6240\u6709\u5206\u914d\u7684\u5185\u5b58 */ char* data_p = (char*)vec->data; for (size_t idx = 0; idx < vec->capacity; idx++) { CHECK(vec->icd.ctor(data_p + idx * vec->icd.size)); } } CATCH { return code; } return 0; } void vector_dtor(vector *vec) { char* data_p = (char*)vec->data; for (size_t idx = 0; idx < vec->capacity; idx++) { vec->icd.dtor(data_p + idx * vec->icd.size); } free(vec->data); vec->data = NULL; return; } int vector_copy(vector *dst, const vector *src) { int code = 0; dst->size = src->size; char* dst_data_p = (char*)dst->data; char* src_data_p = (char*)src->data; TRY { /* \u5982\u679csrc\u7684capacity\u5df2\u7ecf\u6bd4dst\u7684capacity\u66f4\u5927\uff0c\u90a3dst\u5c31\u8981\u91ca\u653e\u6389\u4e4b\u524d\u7684\u5185\u5b58\uff0c\u7136\u540e\u91cd\u65b0\u7533\u8bf7\u5185\u5b58 */ \\ if (dst->capacity < src->size) { if (dst->data) { /* \u91ca\u653e\u6389dst\u7684\u8d44\u6e90 */ if (dst->icd.dtor) { for (size_t idx = 0u; idx < dst->capacity; idx++) { dst->icd.dtor(dst_data_p + idx); } } free(dst->data); } /* \u5fc5\u987b\u8981\u6700\u540e\u8d4b\u503c\uff0c\u56e0\u4e3a\u5148\u91ca\u653e\u540e\u7533\u8bf7 */ dst->capacity = src->size; /* \u4e3adst\u7533\u8bf7\u8d44\u6e90\u7136\u540e\u521d\u59cb\u5316 */ dst->data = malloc(dst->capacity * dst->icd.size); CHECK_NONULL(dst->data); if (dst->icd.ctor) { for (size_t idx = 0u; idx < src->size; idx++) { CHECK(dst->icd.ctor(dst_data_p + idx)); } } } dst->begin_idx = 0; dst->size = src->size; /* \u7136\u540e\u62f7\u8d1d */ if (src->icd.copy) { for (size_t idx = 0u; idx < src->size; idx++) { CHECK(src->icd.copy(dst_data_p + idx, src_data_p + (idx + src->begin_idx))); } } } CATCH { return code; } return 0; } void vector_clear(vector* vec) { vec->begin_idx = 0u; vec->size = 0u; return; } int vector_reserve(vector *vec, size_t new_capacity) { int code = 0; char* dst_data_p = (char*)dst->data; char* src_data_p = (char*)src->data; TRY { CHECK_NOT_EQ(new_capacity, 0); if (new_capacity <= vec->capacity) { return code; } vec->capacity = new_capacity; /* \u5148\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u521d\u59cb\u5316 */ void* new_data = malloc(vec->capacity * vec->icd.size); CHECK_NONNULL(new_data); char* new_data_p = (char*)new_data; if (vec->icd.ctor) { for (size_t idx = 0u; idx < vec->capacity; idx++) { CHECK(T_ctor(new_data + idx), res, res); } } /* \u628a\u65e7\u7684\u5185\u5bb9\u62f7\u8d1d\u8fc7\u6765 */ if (vec->icd.copy) { for (size_t idx = 0; idx < vec->size; idx++) { CHECK(vec->icd.copy(new_data_p + idx, data_p + idx)); } } /* \u9500\u6bc1\u6389\u65e7\u7684\u5185\u5bb9 */ if (vec->icd.dtor) { for (size_t idx = 0; idx < vec->capacity; idx++) { CHECK(vec->icd.dtor(data_p + idx)); } } free(vec->data); vec->data = new_data; } CATCH { return code; } return 0; } int vector_resize(vector *vec, size_t new_size) { int code = 0; TRY { if (vec->begin_idx + new_size > vec->capacity) { CHECK(vector_reserve(vec, vec->begin_idx + new_size)); } vec->size = new_size; } CATCH { return code; } return 0; } int vector_get_at(vector *vec, size_t index, void* elem) { int code = 0; char* data_p = (char*)vec->data; TRY { CHECK_INDEX (index, vec->size); memcpy(elem, data_p + index * vec->icd.size, size); if (vec->icd.copy) CHECK(vec->icd.copy(elem, data_p + index * vec->icd.size)); } CATCH { return code; } return 0; } int vector_set_at(vector *vec, size_t index, void* elem) { int code = 0; TRY { CHECK_INDEX (index, vec->size); char* data_p = (char*)vec->data; memcpy(data_p + index * vec->icd.size, elem, size); if (vec->icd.copy) CHECK(vec->icd.copy(data_p + index * vec->icd.size, elem)); } CATCH { return code; } return 0; } int vector_grow(vector *vec) { int code = 0; size_t new_capacity = vec->capacity * CTL_VEC_GROW_FACTOR; TRY { CHECK(vector_reserve(vec, new_capacity)); } CATCH { return code; } return 0; } int vector_push_back(vector *vec, const void* elem) { int code = 0; char* data_p = (char*)vec->data; TRY { if (vec->capacity == (vec->begin_idx + vec->size)) { CHECK(vector_grow(vec)); } memcpy(vec->icd.copy(data_p + (vec->begin_idx + vec->size), elem, vec->icd.size)); if (vec->icd.copy) CHECK(vec->icd.copy(data_p + (vec->begin_idx + vec->size), elem)); vec->size++; } CATCH { return code; } return 0; } int vector_pop_back(vector *vec, void* elem) { int code = 0; TRY { CHECK_NOT_EQ (vec->size, 0); memcpy(elem, vec->icd.copy(data_p + (vec->begin_idx + vec->size), vec->icd.size)); if (vec->icd.copy) CHECK(elem, vec->icd.copy(data_p + (vec->begin_idx + vec->size))); vec->size--; } CATCH { return code; } return 0; }","title":"\u4f7f\u7528void*\u5b9e\u73b0\u901a\u7528vector"},{"location":"opaque_pointer_vector/#voidvector","text":"","title":"\u4f7f\u7528void*\u5b9e\u73b0\u901a\u7528vector"},{"location":"opaque_pointer_vector/#icd","text":"typedef int (ctor_func_t*)(void*); typedef int (copy_func_t*)(void*, void*); // \u6790\u6784\u51fd\u6570\u901a\u5e38\u4e0d\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u9632\u6b62\u5d4c\u5957\u9519\u8bef\uff0c\u5982\u679c\u9047\u5230\u9519\u8bef\uff0c\u4e00\u822c\u76f4\u63a5exit typedef void (dtor_func_t*)(void*); typedef struct icd_s { size_t size; ctor_func_t ctor; copy_func_t copy; dtor_func_t dtor; } icd_t; typedef struct vector_s { void *data; size_t begin_idx; size_t size; size_t capacity; // element\u7684icd\u51fd\u6570 icd_t icd; } vector; size_t vector_size(vector* vec) { return vec->size; } size_t vector_begin_idx(vector* vec) { return vec->begin_idx; } int vector_ctor_by_size(vector *vec, size_t size) { int code = 0; TRY { vec->begin_idx = 0; vec->size = size; vec->capacity = size; vec->data = malloc(vec->capacity * vec->icd.size); CHECK_NONNULL(vec->data) /* \u521d\u59cb\u5316\u5c31\u8981\u521d\u59cb\u5316\u6240\u6709\u5206\u914d\u7684\u5185\u5b58 */ char* data_p = (char*)vec->data; for (size_t idx = 0; idx < vec->capacity; idx++) { CHECK(vec->icd.ctor(data_p + idx * vec->icd.size)); } } CATCH { return code; } return 0; } void vector_dtor(vector *vec) { char* data_p = (char*)vec->data; for (size_t idx = 0; idx < vec->capacity; idx++) { vec->icd.dtor(data_p + idx * vec->icd.size); } free(vec->data); vec->data = NULL; return; } int vector_copy(vector *dst, const vector *src) { int code = 0; dst->size = src->size; char* dst_data_p = (char*)dst->data; char* src_data_p = (char*)src->data; TRY { /* \u5982\u679csrc\u7684capacity\u5df2\u7ecf\u6bd4dst\u7684capacity\u66f4\u5927\uff0c\u90a3dst\u5c31\u8981\u91ca\u653e\u6389\u4e4b\u524d\u7684\u5185\u5b58\uff0c\u7136\u540e\u91cd\u65b0\u7533\u8bf7\u5185\u5b58 */ \\ if (dst->capacity < src->size) { if (dst->data) { /* \u91ca\u653e\u6389dst\u7684\u8d44\u6e90 */ if (dst->icd.dtor) { for (size_t idx = 0u; idx < dst->capacity; idx++) { dst->icd.dtor(dst_data_p + idx); } } free(dst->data); } /* \u5fc5\u987b\u8981\u6700\u540e\u8d4b\u503c\uff0c\u56e0\u4e3a\u5148\u91ca\u653e\u540e\u7533\u8bf7 */ dst->capacity = src->size; /* \u4e3adst\u7533\u8bf7\u8d44\u6e90\u7136\u540e\u521d\u59cb\u5316 */ dst->data = malloc(dst->capacity * dst->icd.size); CHECK_NONULL(dst->data); if (dst->icd.ctor) { for (size_t idx = 0u; idx < src->size; idx++) { CHECK(dst->icd.ctor(dst_data_p + idx)); } } } dst->begin_idx = 0; dst->size = src->size; /* \u7136\u540e\u62f7\u8d1d */ if (src->icd.copy) { for (size_t idx = 0u; idx < src->size; idx++) { CHECK(src->icd.copy(dst_data_p + idx, src_data_p + (idx + src->begin_idx))); } } } CATCH { return code; } return 0; } void vector_clear(vector* vec) { vec->begin_idx = 0u; vec->size = 0u; return; } int vector_reserve(vector *vec, size_t new_capacity) { int code = 0; char* dst_data_p = (char*)dst->data; char* src_data_p = (char*)src->data; TRY { CHECK_NOT_EQ(new_capacity, 0); if (new_capacity <= vec->capacity) { return code; } vec->capacity = new_capacity; /* \u5148\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u521d\u59cb\u5316 */ void* new_data = malloc(vec->capacity * vec->icd.size); CHECK_NONNULL(new_data); char* new_data_p = (char*)new_data; if (vec->icd.ctor) { for (size_t idx = 0u; idx < vec->capacity; idx++) { CHECK(T_ctor(new_data + idx), res, res); } } /* \u628a\u65e7\u7684\u5185\u5bb9\u62f7\u8d1d\u8fc7\u6765 */ if (vec->icd.copy) { for (size_t idx = 0; idx < vec->size; idx++) { CHECK(vec->icd.copy(new_data_p + idx, data_p + idx)); } } /* \u9500\u6bc1\u6389\u65e7\u7684\u5185\u5bb9 */ if (vec->icd.dtor) { for (size_t idx = 0; idx < vec->capacity; idx++) { CHECK(vec->icd.dtor(data_p + idx)); } } free(vec->data); vec->data = new_data; } CATCH { return code; } return 0; } int vector_resize(vector *vec, size_t new_size) { int code = 0; TRY { if (vec->begin_idx + new_size > vec->capacity) { CHECK(vector_reserve(vec, vec->begin_idx + new_size)); } vec->size = new_size; } CATCH { return code; } return 0; } int vector_get_at(vector *vec, size_t index, void* elem) { int code = 0; char* data_p = (char*)vec->data; TRY { CHECK_INDEX (index, vec->size); memcpy(elem, data_p + index * vec->icd.size, size); if (vec->icd.copy) CHECK(vec->icd.copy(elem, data_p + index * vec->icd.size)); } CATCH { return code; } return 0; } int vector_set_at(vector *vec, size_t index, void* elem) { int code = 0; TRY { CHECK_INDEX (index, vec->size); char* data_p = (char*)vec->data; memcpy(data_p + index * vec->icd.size, elem, size); if (vec->icd.copy) CHECK(vec->icd.copy(data_p + index * vec->icd.size, elem)); } CATCH { return code; } return 0; } int vector_grow(vector *vec) { int code = 0; size_t new_capacity = vec->capacity * CTL_VEC_GROW_FACTOR; TRY { CHECK(vector_reserve(vec, new_capacity)); } CATCH { return code; } return 0; } int vector_push_back(vector *vec, const void* elem) { int code = 0; char* data_p = (char*)vec->data; TRY { if (vec->capacity == (vec->begin_idx + vec->size)) { CHECK(vector_grow(vec)); } memcpy(vec->icd.copy(data_p + (vec->begin_idx + vec->size), elem, vec->icd.size)); if (vec->icd.copy) CHECK(vec->icd.copy(data_p + (vec->begin_idx + vec->size), elem)); vec->size++; } CATCH { return code; } return 0; } int vector_pop_back(vector *vec, void* elem) { int code = 0; TRY { CHECK_NOT_EQ (vec->size, 0); memcpy(elem, vec->icd.copy(data_p + (vec->begin_idx + vec->size), vec->icd.size)); if (vec->icd.copy) CHECK(elem, vec->icd.copy(data_p + (vec->begin_idx + vec->size))); vec->size--; } CATCH { return code; } return 0; }","title":"icd\u51fd\u6570"},{"location":"static_check/","text":"\u9759\u6001\u68c0\u67e5 cppcheck","title":"\u9759\u6001\u68c0\u67e5"},{"location":"static_check/#_1","text":"","title":"\u9759\u6001\u68c0\u67e5"},{"location":"static_check/#cppcheck","text":"","title":"cppcheck"},{"location":"template/","text":"\u6a21\u677f \u4f7f\u7528\u5b8f\u5b9e\u73b0\u6a21\u677f \u4f7f\u7528\u5b8f\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u5b9e\u73b0\u6a21\u677f\uff0c\u5b83\u548cc++\u7b49\u8bed\u8a00\u7684\u6a21\u677f\u672c\u8d28\u4e00\u6837\uff0c\u901a\u8fc7\u5bf9\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884ccodegen\u6765\u5b9e\u4f8b\u5316\u4ee3\u7801\uff0c\u4f46\u662f\u56e0\u4e3a\u8bed\u8a00\u672c\u8eab\u5c40\u9650\uff0c \u4e0d\u652f\u6301\u9690\u5f0f\u5b9e\u4f8b\u5316\u548c\u7279\u5316 \u3002\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u5b8c\u5168\u591f\u7528\uff0c\u53ef\u4ee5\u590d\u7528\u5927\u91cf\u4ee3\u7801\uff0c\u53ea\u662f\u6613\u7528\u6027\u7565\u5dee\u3002 \u548cc++\u6a21\u677f\u4e00\u6837\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4ee3\u7801\u81a8\u80c0\u3002 #define DECL_ADD(type) \\ void add_##type(type* dst, type* lhs, type* rhs, unsigned int num); #define IMPL_ADD(type) \\ void add_##type(type* dst, type* lhs, type* rhs, unsigned int num) { \\ for (unsinged int i = 0; i < num; i++) { \\ dst[i] = lhs[i] + rhs[i]; \\ } \\ } #define CALL_ADD(type) add_##type DECL_ADD(int); DECL_ADD(float); IMPL_ADD(int); IMPL_ADD(float); CALL_ADD(int)(dst, lhs, rhs, num); CALL_ADD(float)(dst, lhs, rhs, num); \u4f7f\u7528\u4e0d\u900f\u660e\u6307\u9488\u5b9e\u73b0\u6a21\u677f \u4ec0\u4e48\u662f\u4e0d\u900f\u660e\u6307\u9488\uff1f \u987e\u540d\u601d\u4e49\uff0c\u4e0d\u900f\u660e\u662f\u6211\u4eec\u770b\u4e0d\u5230\u7684\u3002\u4f8b\u5982\uff0c\u6728\u6750\u662f\u4e0d\u900f\u660e\u7684\u3002\u4e0d\u900f\u660e\u6307\u9488\u662f\u6307\u5411\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9\u5728\u5b9a\u4e49\u4e4b\u65f6\u4e0d\u516c\u5f00\u3002 \u5728\u6cdb\u578b\u7684\u5b9e\u73b0\u91cc\uff0c\u6211\u4eec\u4f7f\u7528void \u6765\u5b9e\u73b0\u4e0d\u900f\u660e\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u5185\u5b58\uff0c\u800c\u4e0d\u7528\u5173\u5fc3\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u8fd9\u6b63\u662f\u6cdb\u578b\u6240\u9700\u8981\u7684\u3002 \u4f7f\u7528\u4e0d\u900f\u660e\u6307\u9488\u6765\u5b9e\u73b0\u6a21\u677f\uff0c\u51e0\u4e4e\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u4ee3\u7801\u81a8\u80c0\uff0c\u8fd9\u662f\u5b83\u7684\u4f18\u52bf\uff0c\u4f46\u662f\u6027\u80fd\u7565\u5dee\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u672c\u6765\u5728\u5bc4\u5b58\u5668\u4e0a\u5b8c\u6210\u7684\u8ba1\u7b97\u5f3a\u884c\u8f6c\u79fb\u5230\u6808\u4e0a\u3002 * typedef void (add_func_t*)(void*, void* , void* ); void add(void* dst, void* lhs, void* rhs, unsigned int num, unsigned int elem_size, add_func_t func_ptr) { char* dst_p = (char*)dst; char* lhs_p = (char*)lhs; char* rhs_p = (char*)rhs; for (unsigned int i = 0; i < num; i++) { func_ptr(dst_p, lhs_p, rhs_p); dst_p += elem_size; lhs_p += elem_size; rhs_p += elem_size; } } void add_int(void* dst, void* lhs, void* rhs) { *(int*)dst = *(int*)lhs + *(int*)rhs; } void add_float(void* dst, void* lhs, void* rhs) { *(float*)dst = *(float*)lhs + *(float*)rhs; } add(dst, lhs, rhs, num, sizeof(int), add_int); add(dst, lhs, rhs, num, sizeof(float), add_float); \u4fb5\u5165\u5f0f\u5bb9\u5668 \u6ce8\u610f\uff1a\u4fb5\u5165\u5f0f\u5bb9\u5668\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u6a21\u677f\uff0c\u5b83\u53ea\u80fd\u590d\u7528\u5e26\u6709\u94fe\u7684\u6570\u636e\u7ed3\u6784\u7684\u903b\u8f91\uff0c\u8bf8\u5982\u94fe\u8868\uff0c\u6811\u548c\u56fe\u7b49 \u666e\u901a\u94fe\u8868\uff1a \u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u7684\u666e\u901a\u94fe\u8868\u662f\u6bcf\u4e2a\u8282\u70b9\u7684next\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u9996\u5730\u5740\uff1a struct node { int data; struct node* next; } \u666e\u901a\u94fe\u8868\u7684\u7f3a\u70b9\uff1a \u4e00\u6761\u94fe\u8868\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u6570\u636e\u7c7b\u578b\u9700\u8981\u5b8c\u5168\u4e00\u81f4 \u5bf9\u67d0\u6761\u94fe\u8868\u7684\u64cd\u4f5c\u5982\u63d2\u5165\uff0c\u5220\u9664\u7b49\u53ea\u80fd\u5bf9\u8fd9\u79cd\u7c7b\u578b\u7684\u94fe\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u94fe\u8868\u7684\u7c7b\u578b\u6362\u4e86\uff0c\u5c31\u8981\u91cd\u65b0\u518d\u5c01\u88c5\u51fa\u4e00\u5957\u4e00\u6837\u7684\u64cd\u4f5c\uff0c\u6cdb\u5316\u80fd\u529b\u5dee \u4fb5\u5165\u5f0f\u94fe\u8868\uff1a \u4fb5\u5165\u5f0f\u94fe\u8868\u7684\u8282\u70b9\u7684\u94fe\u63a5\u6210\u5458\u6307\u5411\u7684\u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u94fe\u63a5\u6210\u5458\uff1a \u8282\u70b9\u7ed3\u6784\u5982\u4e0b\uff1a typ**edef struct link { struct link* next; }list_t; typedef struct { int data; struct link* list; } node; \u4fb5\u5165\u5f0f\u94fe\u8868\u7684\u4f18\u70b9\uff1a \u8282\u70b9\u7c7b\u578b\u65e0\u9700\u4e00\u81f4\uff0c\u53ea\u9700\u8981\u5305\u542blist_t\u6210\u5458\u5373\u53ef \u6cdb\u5316\u80fd\u529b\u5f3a\uff0c\u6240\u6709\u94fe\u8868\u7684\u64cd\u4f5c\u65b9\u5f0f\u5747\u53ef\u7edf\u4e00\uff1b \u8bbf\u95ee\u4fb5\u5165\u5f0f\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u636e\uff0c\u9700\u8981\u4f7f\u7528offsetof\u548ccontainer_of typedef struct link { struct link* next; struct link* prev; } list_t; #define LIST_HEAD_INIT(name) {&(name), &(name)} #define LIST_HEAD(name) list_t name = LIST_HEAD_INIT(name) #define list_entry(node, type, member) \\ container_of(node, type, member) // \u4e0b\u9762\u8fd9\u4e9bapi\u90fd\u662f\u901a\u7528\u7684\uff0c\u65e0\u8bbadata\u662f\u6570\u636e\u7c7b\u578b #define list_for_each(pos, head) \\ for (pos = (head)->next; pos != (head); pos = pos->next) #define list_for_each_safe(pos, n, head) \\ for (pos = (head)->next, n = pos->next; pos != (head); \\ pos = n, n = pos->next) void list_init(list_t* list); void list_insert_after(list_t* list, list_t* node); void list_insert_before(list_t* list, list_t* node); void list_remove(list_t* node); int list_isempty(const list_t* list); unsigned int list_size(const list_t* list); \u5df2\u77e5link\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u62ff\u5230data\u7684\u503c struct node { int data; list_t link; } list_t link_p; int val = list_entry(link_p, struct node, link)->data; \u4ee5\u4e0b\u5b9e\u73b0\u90fd\u662f\u901a\u7528\u7684 #include \"link_list.h\" void list_init(list_t* list) { list->next = list->prev = list; } void list_insert_after(list_t* list, list_t* node) { list->next->prev = node; node->next = list->next; list->next = node; node->prev = list; } void list_insert_before(list_t* list, list_t* node) { list->prev->next = node; node->prev = list->prev; list->prev = node; node->next = list; } void list_remove(list_t* node) { node->next->prev = node->prev; node->prev->next = node->next; node->next = node->prev = node; } int list_isempty(const list_t* list) { return list->next == list; } unsigned int list_size(const list_t* list) { unsigned int size = 0; const list_t* p = list; while (p->next != list) { p = p->next; size++; } return size; }","title":"\u6a21\u677f\uff08\u6cdb\u578b\uff09"},{"location":"template/#_1","text":"","title":"\u6a21\u677f"},{"location":"template/#_2","text":"\u4f7f\u7528\u5b8f\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u5b9e\u73b0\u6a21\u677f\uff0c\u5b83\u548cc++\u7b49\u8bed\u8a00\u7684\u6a21\u677f\u672c\u8d28\u4e00\u6837\uff0c\u901a\u8fc7\u5bf9\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884ccodegen\u6765\u5b9e\u4f8b\u5316\u4ee3\u7801\uff0c\u4f46\u662f\u56e0\u4e3a\u8bed\u8a00\u672c\u8eab\u5c40\u9650\uff0c \u4e0d\u652f\u6301\u9690\u5f0f\u5b9e\u4f8b\u5316\u548c\u7279\u5316 \u3002\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u5b8c\u5168\u591f\u7528\uff0c\u53ef\u4ee5\u590d\u7528\u5927\u91cf\u4ee3\u7801\uff0c\u53ea\u662f\u6613\u7528\u6027\u7565\u5dee\u3002 \u548cc++\u6a21\u677f\u4e00\u6837\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4ee3\u7801\u81a8\u80c0\u3002 #define DECL_ADD(type) \\ void add_##type(type* dst, type* lhs, type* rhs, unsigned int num); #define IMPL_ADD(type) \\ void add_##type(type* dst, type* lhs, type* rhs, unsigned int num) { \\ for (unsinged int i = 0; i < num; i++) { \\ dst[i] = lhs[i] + rhs[i]; \\ } \\ } #define CALL_ADD(type) add_##type DECL_ADD(int); DECL_ADD(float); IMPL_ADD(int); IMPL_ADD(float); CALL_ADD(int)(dst, lhs, rhs, num); CALL_ADD(float)(dst, lhs, rhs, num);","title":"\u4f7f\u7528\u5b8f\u5b9e\u73b0\u6a21\u677f"},{"location":"template/#_3","text":"","title":"\u4f7f\u7528\u4e0d\u900f\u660e\u6307\u9488\u5b9e\u73b0\u6a21\u677f"},{"location":"template/#_4","text":"\u987e\u540d\u601d\u4e49\uff0c\u4e0d\u900f\u660e\u662f\u6211\u4eec\u770b\u4e0d\u5230\u7684\u3002\u4f8b\u5982\uff0c\u6728\u6750\u662f\u4e0d\u900f\u660e\u7684\u3002\u4e0d\u900f\u660e\u6307\u9488\u662f\u6307\u5411\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9\u5728\u5b9a\u4e49\u4e4b\u65f6\u4e0d\u516c\u5f00\u3002 \u5728\u6cdb\u578b\u7684\u5b9e\u73b0\u91cc\uff0c\u6211\u4eec\u4f7f\u7528void \u6765\u5b9e\u73b0\u4e0d\u900f\u660e\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u5185\u5b58\uff0c\u800c\u4e0d\u7528\u5173\u5fc3\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u8fd9\u6b63\u662f\u6cdb\u578b\u6240\u9700\u8981\u7684\u3002 \u4f7f\u7528\u4e0d\u900f\u660e\u6307\u9488\u6765\u5b9e\u73b0\u6a21\u677f\uff0c\u51e0\u4e4e\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u4ee3\u7801\u81a8\u80c0\uff0c\u8fd9\u662f\u5b83\u7684\u4f18\u52bf\uff0c\u4f46\u662f\u6027\u80fd\u7565\u5dee\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u672c\u6765\u5728\u5bc4\u5b58\u5668\u4e0a\u5b8c\u6210\u7684\u8ba1\u7b97\u5f3a\u884c\u8f6c\u79fb\u5230\u6808\u4e0a\u3002 * typedef void (add_func_t*)(void*, void* , void* ); void add(void* dst, void* lhs, void* rhs, unsigned int num, unsigned int elem_size, add_func_t func_ptr) { char* dst_p = (char*)dst; char* lhs_p = (char*)lhs; char* rhs_p = (char*)rhs; for (unsigned int i = 0; i < num; i++) { func_ptr(dst_p, lhs_p, rhs_p); dst_p += elem_size; lhs_p += elem_size; rhs_p += elem_size; } } void add_int(void* dst, void* lhs, void* rhs) { *(int*)dst = *(int*)lhs + *(int*)rhs; } void add_float(void* dst, void* lhs, void* rhs) { *(float*)dst = *(float*)lhs + *(float*)rhs; } add(dst, lhs, rhs, num, sizeof(int), add_int); add(dst, lhs, rhs, num, sizeof(float), add_float);","title":"\u4ec0\u4e48\u662f\u4e0d\u900f\u660e\u6307\u9488\uff1f"},{"location":"template/#_5","text":"\u6ce8\u610f\uff1a\u4fb5\u5165\u5f0f\u5bb9\u5668\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u6a21\u677f\uff0c\u5b83\u53ea\u80fd\u590d\u7528\u5e26\u6709\u94fe\u7684\u6570\u636e\u7ed3\u6784\u7684\u903b\u8f91\uff0c\u8bf8\u5982\u94fe\u8868\uff0c\u6811\u548c\u56fe\u7b49 \u666e\u901a\u94fe\u8868\uff1a \u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u7684\u666e\u901a\u94fe\u8868\u662f\u6bcf\u4e2a\u8282\u70b9\u7684next\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u9996\u5730\u5740\uff1a struct node { int data; struct node* next; } \u666e\u901a\u94fe\u8868\u7684\u7f3a\u70b9\uff1a \u4e00\u6761\u94fe\u8868\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u6570\u636e\u7c7b\u578b\u9700\u8981\u5b8c\u5168\u4e00\u81f4 \u5bf9\u67d0\u6761\u94fe\u8868\u7684\u64cd\u4f5c\u5982\u63d2\u5165\uff0c\u5220\u9664\u7b49\u53ea\u80fd\u5bf9\u8fd9\u79cd\u7c7b\u578b\u7684\u94fe\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u94fe\u8868\u7684\u7c7b\u578b\u6362\u4e86\uff0c\u5c31\u8981\u91cd\u65b0\u518d\u5c01\u88c5\u51fa\u4e00\u5957\u4e00\u6837\u7684\u64cd\u4f5c\uff0c\u6cdb\u5316\u80fd\u529b\u5dee \u4fb5\u5165\u5f0f\u94fe\u8868\uff1a \u4fb5\u5165\u5f0f\u94fe\u8868\u7684\u8282\u70b9\u7684\u94fe\u63a5\u6210\u5458\u6307\u5411\u7684\u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u94fe\u63a5\u6210\u5458\uff1a \u8282\u70b9\u7ed3\u6784\u5982\u4e0b\uff1a typ**edef struct link { struct link* next; }list_t; typedef struct { int data; struct link* list; } node; \u4fb5\u5165\u5f0f\u94fe\u8868\u7684\u4f18\u70b9\uff1a \u8282\u70b9\u7c7b\u578b\u65e0\u9700\u4e00\u81f4\uff0c\u53ea\u9700\u8981\u5305\u542blist_t\u6210\u5458\u5373\u53ef \u6cdb\u5316\u80fd\u529b\u5f3a\uff0c\u6240\u6709\u94fe\u8868\u7684\u64cd\u4f5c\u65b9\u5f0f\u5747\u53ef\u7edf\u4e00\uff1b \u8bbf\u95ee\u4fb5\u5165\u5f0f\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u636e\uff0c\u9700\u8981\u4f7f\u7528offsetof\u548ccontainer_of typedef struct link { struct link* next; struct link* prev; } list_t; #define LIST_HEAD_INIT(name) {&(name), &(name)} #define LIST_HEAD(name) list_t name = LIST_HEAD_INIT(name) #define list_entry(node, type, member) \\ container_of(node, type, member) // \u4e0b\u9762\u8fd9\u4e9bapi\u90fd\u662f\u901a\u7528\u7684\uff0c\u65e0\u8bbadata\u662f\u6570\u636e\u7c7b\u578b #define list_for_each(pos, head) \\ for (pos = (head)->next; pos != (head); pos = pos->next) #define list_for_each_safe(pos, n, head) \\ for (pos = (head)->next, n = pos->next; pos != (head); \\ pos = n, n = pos->next) void list_init(list_t* list); void list_insert_after(list_t* list, list_t* node); void list_insert_before(list_t* list, list_t* node); void list_remove(list_t* node); int list_isempty(const list_t* list); unsigned int list_size(const list_t* list); \u5df2\u77e5link\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u62ff\u5230data\u7684\u503c struct node { int data; list_t link; } list_t link_p; int val = list_entry(link_p, struct node, link)->data; \u4ee5\u4e0b\u5b9e\u73b0\u90fd\u662f\u901a\u7528\u7684 #include \"link_list.h\" void list_init(list_t* list) { list->next = list->prev = list; } void list_insert_after(list_t* list, list_t* node) { list->next->prev = node; node->next = list->next; list->next = node; node->prev = list; } void list_insert_before(list_t* list, list_t* node) { list->prev->next = node; node->prev = list->prev; list->prev = node; node->next = list; } void list_remove(list_t* node) { node->next->prev = node->prev; node->prev->next = node->next; node->next = node->prev = node; } int list_isempty(const list_t* list) { return list->next == list; } unsigned int list_size(const list_t* list) { unsigned int size = 0; const list_t* p = list; while (p->next != list) { p = p->next; size++; } return size; }","title":"\u4fb5\u5165\u5f0f\u5bb9\u5668"},{"location":"test_driven/","text":"\u6d4b\u8bd5\u9a71\u52a8 \u4ee3\u7801\u8986\u76d6\u7387 stub\u548cmock C\u8bed\u8a00stub\uff0c\u4e5f\u5373C\u8bed\u8a00\u6253\u6869\uff0c\u662f\u7528\u6280\u5de7\u4f7f\u5f97\u8c03\u7528\u67d0\u4e2a\u51fd\u6570 func \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f func_stub \u901a\u5e38\u67093\u79cd\u5b9e\u73b0\u65b9\u5f0f - \u7f16\u8bd1\u65f6\u6253\u6869 - \u94fe\u63a5\u65f6\u6253\u6869 - \u8fd0\u884c\u65f6\u6253\u6869 \u4e0b\u9762\u4ecb\u7ecd\u7684\u662f\u8fd0\u884c\u65f6\u6253\u6869 #include \"stub.h\" #include <stdio.h> void add(int i) { printf(\"add(%d)\\n\",i); } void add_stub(int i) { printf(\"add_stub(%d)\\n\",i); } int main() { INSTALL_STUB(add,add_stub); add(12); REMOVE_STUB(add_stub); add(11); return 0; }\u3000 \u5355\u5143\u6d4b\u8bd5 \u96c6\u6210\u6d4b\u8bd5 \u7cfb\u7edf\u6d4b\u8bd5 \u6a21\u7cca\u6d4b\u8bd5","title":"\u6d4b\u8bd5\u9a71\u52a8"},{"location":"test_driven/#_1","text":"","title":"\u6d4b\u8bd5\u9a71\u52a8"},{"location":"test_driven/#_2","text":"","title":"\u4ee3\u7801\u8986\u76d6\u7387"},{"location":"test_driven/#stubmock","text":"C\u8bed\u8a00stub\uff0c\u4e5f\u5373C\u8bed\u8a00\u6253\u6869\uff0c\u662f\u7528\u6280\u5de7\u4f7f\u5f97\u8c03\u7528\u67d0\u4e2a\u51fd\u6570 func \u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f func_stub \u901a\u5e38\u67093\u79cd\u5b9e\u73b0\u65b9\u5f0f - \u7f16\u8bd1\u65f6\u6253\u6869 - \u94fe\u63a5\u65f6\u6253\u6869 - \u8fd0\u884c\u65f6\u6253\u6869 \u4e0b\u9762\u4ecb\u7ecd\u7684\u662f\u8fd0\u884c\u65f6\u6253\u6869 #include \"stub.h\" #include <stdio.h> void add(int i) { printf(\"add(%d)\\n\",i); } void add_stub(int i) { printf(\"add_stub(%d)\\n\",i); } int main() { INSTALL_STUB(add,add_stub); add(12); REMOVE_STUB(add_stub); add(11); return 0; }","title":"stub\u548cmock"},{"location":"test_driven/#_3","text":"","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"test_driven/#_4","text":"","title":"\u96c6\u6210\u6d4b\u8bd5"},{"location":"test_driven/#_5","text":"","title":"\u7cfb\u7edf\u6d4b\u8bd5"},{"location":"test_driven/#_6","text":"","title":"\u6a21\u7cca\u6d4b\u8bd5"}]}