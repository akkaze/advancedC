{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C\u8bed\u8a00\u9ad8\u7ea7\u6280\u5de7 C\u8bed\u8a00\u4f18\u52bf \u9ad8\u6548\u6027\uff1aC\u8bed\u8a00\u8bbe\u8ba1\u7b80\u6d01\uff0c\u6267\u884c\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6\u8d44\u6e90\u3002 \u53ef\u79fb\u690d\u6027\uff1aC\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u8fd0\u884c\uff0c\u5177\u6709\u826f\u597d\u7684\u53ef\u79fb\u690d\u6027\u3002 \u8bed\u6cd5\u7b80\u5355\uff1a \u529f\u80fd\u5f3a\u5927\uff1aC\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6570\u636e\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26\uff0c\u652f\u6301\u7ed3\u6784\u5316\u7f16\u7a0b\uff0c\u80fd\u591f\u5b9e\u73b0\u590d\u6742\u7684\u7b97\u6cd5\u3002 \u7075\u6d3b\u6027\uff1aC\u8bed\u8a00\u5141\u8bb8\u5bf9\u5185\u5b58\u8fdb\u884c\u76f4\u63a5\u64cd\u4f5c\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7cbe\u7ec6\u63a7\u5236\u7a0b\u5e8f\u7684\u5185\u5b58\u4f7f\u7528\u3002\u8fd9\u4f7f\u5f97\u7a0b\u5e8f\u80fd\u591f\u9ad8\u6548\u5730\u4f7f\u7528\u5185\u5b58\u8d44\u6e90\uff0c\u5c24\u5176\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u4e2d\u5c24\u4e3a\u91cd\u8981\u200c\u3002 abi\u7a33\u5b9a: C\u8bed\u8a00\u81f3\u4eca\u4ecd\u7136\u662f\u5404\u8bed\u8a00\u4e4b\u95f4\u4ea4\u4e92\u7684\u57fa\u5e95\u8bed\u8a00\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0e\u5176\u5b83\u4efb\u4f55\u8bed\u8a00\u4ea4\u4e92\uff0c\u6682\u65f6\u65e0\u4efb\u4f55\u8bed\u8a00\u53ef\u4ee5\u53d6\u4ee3\u5b83\u7684\u4f4d\u7f6e\u200c\u3002 \u200c\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\u7684\u76f4\u63a5\u6027\u200c\uff1aC\u8bed\u8a00\u7684\u7f16\u8bd1\u8fc7\u7a0b\u76f4\u63a5\u5c06\u6e90\u4ee3\u7801\u8f6c\u6362\u4e3a\u76ee\u6807\u673a\u5668\u7684\u673a\u5668\u7801\uff0c\u65e0\u9700\u901a\u8fc7\u865a\u62df\u673a\u6216\u89e3\u91ca\u5668\u7684\u4e2d\u95f4\u6b65\u9aa4\uff0c\u786e\u4fdd\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u9ad8\u6548\u6027\u80fd\u548c\u6700\u5c0f\u7684\u5ef6\u8fdf\u200c \u6570\u636e\u7c7b\u578b\u4e0e\u786c\u4ef6\u7684\u7d27\u5bc6\u6620\u5c04\u200c\uff1aC\u8bed\u8a00\u5b9a\u4e49\u4e86\u4e00\u7ec4\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5982\u6574\u6570\u3001\u5b57\u7b26\u548c\u6d6e\u70b9\u6570\uff0c\u8fd9\u4e9b\u7c7b\u578b\u4e0e\u8ba1\u7b97\u673a\u786c\u4ef6\u6df1\u5ea6\u96c6\u6210\uff0c\u5141\u8bb8\u7a0b\u5e8f\u5458\u7f16\u5199\u76f4\u63a5\u6620\u5c04\u5230CPU\u652f\u6301\u6307\u4ee4\u96c6\u7684\u4ee3\u7801\uff0c\u4ece\u800c\u5b9e\u73b0\u4ee3\u7801\u7684\u9ad8\u6548\u8fd0\u884c\u200c\u3002 C\u8bed\u8a00\u52a3\u52bf","title":"\u5f15\u8a00"},{"location":"#c","text":"","title":"C\u8bed\u8a00\u9ad8\u7ea7\u6280\u5de7"},{"location":"#c_1","text":"\u9ad8\u6548\u6027\uff1aC\u8bed\u8a00\u8bbe\u8ba1\u7b80\u6d01\uff0c\u6267\u884c\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6\u8d44\u6e90\u3002 \u53ef\u79fb\u690d\u6027\uff1aC\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5728\u591a\u79cd\u8ba1\u7b97\u673a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u8fd0\u884c\uff0c\u5177\u6709\u826f\u597d\u7684\u53ef\u79fb\u690d\u6027\u3002 \u8bed\u6cd5\u7b80\u5355\uff1a \u529f\u80fd\u5f3a\u5927\uff1aC\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6570\u636e\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26\uff0c\u652f\u6301\u7ed3\u6784\u5316\u7f16\u7a0b\uff0c\u80fd\u591f\u5b9e\u73b0\u590d\u6742\u7684\u7b97\u6cd5\u3002 \u7075\u6d3b\u6027\uff1aC\u8bed\u8a00\u5141\u8bb8\u5bf9\u5185\u5b58\u8fdb\u884c\u76f4\u63a5\u64cd\u4f5c\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u7cbe\u7ec6\u63a7\u5236\u7a0b\u5e8f\u7684\u5185\u5b58\u4f7f\u7528\u3002\u8fd9\u4f7f\u5f97\u7a0b\u5e8f\u80fd\u591f\u9ad8\u6548\u5730\u4f7f\u7528\u5185\u5b58\u8d44\u6e90\uff0c\u5c24\u5176\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u4e2d\u5c24\u4e3a\u91cd\u8981\u200c\u3002 abi\u7a33\u5b9a: C\u8bed\u8a00\u81f3\u4eca\u4ecd\u7136\u662f\u5404\u8bed\u8a00\u4e4b\u95f4\u4ea4\u4e92\u7684\u57fa\u5e95\u8bed\u8a00\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0e\u5176\u5b83\u4efb\u4f55\u8bed\u8a00\u4ea4\u4e92\uff0c\u6682\u65f6\u65e0\u4efb\u4f55\u8bed\u8a00\u53ef\u4ee5\u53d6\u4ee3\u5b83\u7684\u4f4d\u7f6e\u200c\u3002 \u200c\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\u7684\u76f4\u63a5\u6027\u200c\uff1aC\u8bed\u8a00\u7684\u7f16\u8bd1\u8fc7\u7a0b\u76f4\u63a5\u5c06\u6e90\u4ee3\u7801\u8f6c\u6362\u4e3a\u76ee\u6807\u673a\u5668\u7684\u673a\u5668\u7801\uff0c\u65e0\u9700\u901a\u8fc7\u865a\u62df\u673a\u6216\u89e3\u91ca\u5668\u7684\u4e2d\u95f4\u6b65\u9aa4\uff0c\u786e\u4fdd\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u9ad8\u6548\u6027\u80fd\u548c\u6700\u5c0f\u7684\u5ef6\u8fdf\u200c \u6570\u636e\u7c7b\u578b\u4e0e\u786c\u4ef6\u7684\u7d27\u5bc6\u6620\u5c04\u200c\uff1aC\u8bed\u8a00\u5b9a\u4e49\u4e86\u4e00\u7ec4\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5982\u6574\u6570\u3001\u5b57\u7b26\u548c\u6d6e\u70b9\u6570\uff0c\u8fd9\u4e9b\u7c7b\u578b\u4e0e\u8ba1\u7b97\u673a\u786c\u4ef6\u6df1\u5ea6\u96c6\u6210\uff0c\u5141\u8bb8\u7a0b\u5e8f\u5458\u7f16\u5199\u76f4\u63a5\u6620\u5c04\u5230CPU\u652f\u6301\u6307\u4ee4\u96c6\u7684\u4ee3\u7801\uff0c\u4ece\u800c\u5b9e\u73b0\u4ee3\u7801\u7684\u9ad8\u6548\u8fd0\u884c\u200c\u3002","title":"C\u8bed\u8a00\u4f18\u52bf"},{"location":"#c_2","text":"","title":"C\u8bed\u8a00\u52a3\u52bf"},{"location":"macros/","text":"\u91cd\u8981\u7684\u5b8f offsetof offsetof \u662f\u4e00\u4e2a\u5b8f\uff0c\u901a\u5e38\u5728 C \u548c C++ \u7f16\u7a0b\u4e2d\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\u76f8\u5bf9\u4e8e\u7ed3\u6784\u4f53\u8d77\u59cb\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u5b8f\u5728 \u6216\u8005 \u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002\u5b83\u4e3b\u8981\u7528\u4e8e\u4f4e\u7ea7\u7cfb\u7edf\u7f16\u7a0b\u548c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u901a\u8fc7\u8ba1\u7b97\u5730\u5740\u504f\u79fb\uff0c\u53ef\u4ee5\u66f4\u7075\u6d3b\u5730\u64cd\u4f5c\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u3002 \u8bed\u6cd5 #include <stddef.h> offsetof(type, member) // type: \u7ed3\u6784\u4f53\u7c7b\u578b\u3002 // member: \u9700\u8981\u8ba1\u7b97\u504f\u79fb\u91cf\u7684\u7ed3\u6784\u4f53\u6210\u5458\u7684\u540d\u5b57\u3002 offsetof\u7684\u5b9e\u73b0 offset\u5728gcc\u4e0b\u7684\u5b9e\u73b0 #define offsetof(type, member) ((size_t) &((type *)0)->member) \u8fd9\u4e2a\u5b9a\u4e49\u76f4\u63a5\u901a\u8fc7\u89e3\u5f15\u7528\u7a7a\u6307\u9488\u6765\u8bbf\u95ee\u6210\u5458\u53d8\u91cfm\u7684\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u504f\u79fb\u91cf\u3002\u7531\u4e8eC\u8bed\u8a00\u5141\u8bb8\u8fd9\u79cd\u64cd\u4f5c\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u5b58\u5728\u6f5c\u5728\u7684\u98ce\u9669\uff0c\u56e0\u4e3a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u662f\u4e0d\u5b89\u5168\u7684\u200c offset\u5728msvc\u4e0b\u7684\u5b9e\u73b0 #define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))) \u5728ANSI C\u4e2d, &((st )(0))->m\u4e0d\u4f1a\u5bf90(NULL)\u771f\u6b63\u7684\u8fdb\u884c\u89e3\u5f15\u7528, \u800c\u4f1a\u76f4\u63a5\u8fd4\u56dem\u7684\u5730\u5740, \u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5bf9NULL\u89e3\u5f15\u7528\u4f1a\u9020\u6210\u7684\u6bb5\u9519\u8bef. \u800c\u5728c++\u4e2d, \u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u89c4\u5219, \u6240\u4ee5\u5982\u679c\u60f3ANSI C\u8fd9\u6837\u5b9e\u73b0offsetof\u4f1a\u5f15\u8d77\u6bb5\u9519\u8bef. \u4e5f\u77e5\u9053char \u662f\u5404\u79cdtype\u4e2dstandard\u91cc\u552f\u4e00\u4fdd\u8bc1\u8fc7sizeof\u662f1, \u5176\u5b83\u90fd\u662fimplemention dependent. \u4f7f\u7528volatile\u5173\u952e\u5b57\u662f\u4e3a\u4e86\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u786e\u4fdd\u5728\u7f16\u8bd1\u65f6\u80fd\u591f\u6b63\u786e\u8ba1\u7b97\u504f\u79fb\u91cf\u200c offsetof\u7684\u4f18\u7f3a\u70b9 \u200c\u4f18\u70b9\u200c\uff1a\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\u51fa\u7ed3\u6784\u4f53\u6210\u5458\u7684\u504f\u79fb\u91cf\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\u548c\u51c6\u786e\u6027\u3002 \u200c\u7f3a\u70b9\u200c\uff1a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u5b58\u5728\u4e0d\u5b89\u5168\u56e0\u7d20\uff0c\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5728C++\u4e2d\u76f4\u63a5\u4f7f\u7528\u53ef\u80fd\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 offsetof\u7684\u4f7f\u7528 #include <stddef.h> #ifndef offsetof #define offsetof(type, member) ((size_t) &((type *)0)->member) #endif // \u793a\u4f8b\u4f7f\u7528 struct MyStruct { int a; char b; double c; }; int main() { size_t offset_of_a = offsetof(struct MyStruct, a); size_t offset_of_b = offsetof(struct MyStruct, b); size_t offset_of_c = offsetof(struct MyStruct, c); printf(\"Offset of 'a' is: %zu\\n\", offset_of_a); printf(\"Offset of 'b' is: %zu\\n\", offset_of_b); printf(\"Offset of 'c' is: %zu\\n\", offset_of_c); return 0; } containerof \u200ccontainer_of\u200c\u662f\u4e00\u4e2a\u5728Linux\u5185\u6838\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5b8f\u5b9a\u4e49\uff0c\u4e3b\u8981\u7528\u4e8e\u901a\u8fc7\u7ed3\u6784\u4f53\u6210\u5458\u7684\u5730\u5740\u6765\u83b7\u53d6\u8be5\u7ed3\u6784\u4f53\u7684\u5730\u5740\u3002\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a containerof\u7684\u5b9e\u73b0 #define container_of(ptr, type, member) ({ \\ void *__mptr = (void *)(ptr); \\ BUILD_BUG_ON_MSG(!__same_type(*(ptr), ((type *)0)->member) && \\ !__same_type(*(ptr), void), \\ \"pointer type mismatch in container_of()\"); \\ ((type *)(__mptr - offsetof(type, member))); \\ }) \u4f7f\u7528\u65b9\u6cd5 container_of\u5b8f\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a ptr\uff1a\u6307\u5411\u7ed3\u6784\u4f53\u6210\u5458\u7684\u6307\u9488\u3002 type\uff1a\u8be5\u6210\u5458\u6240\u5728\u7684\u7ed3\u6784\u4f53\u7684\u7c7b\u578b\u3002 member\uff1a\u7ed3\u6784\u4f53\u4e2d\u6210\u5458\u7684\u540d\u79f0\u3002 \u5b9e\u73b0\u539f\u7406 1. \u200c\u7c7b\u578b\u68c0\u67e5\u200c\uff1a\u9996\u5148\uff0c\u901a\u8fc7__same_type\u5b8f\u68c0\u67e5ptr\u6307\u5411\u7684\u7c7b\u578b\u662f\u5426\u4e0etype\u7c7b\u578b\u5339\u914d\uff0c\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u3002 2. \u200c\u8ba1\u7b97\u504f\u79fb\u91cf\u200c\uff1a\u4f7f\u7528offsetof\u5b8f\u8ba1\u7b97\u6210\u5458member\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cf\u3002 3. \u200c\u6307\u9488\u8f6c\u6362\u200c\uff1a\u6700\u540e\uff0c\u901a\u8fc7\u51cf\u53bb\u504f\u79fb\u91cf\u6765\u8ba1\u7b97\u7ed3\u6784\u4f53\u7684\u5730\u5740\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7c7b\u578b\u3002 container_of\u7684\u793a\u4f8b \u5047\u8bbe\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53struct foo\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6210\u5458\u53d8\u91cfbar\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u7528container_of\uff1a struct foo { int bar; // \u5176\u4ed6\u6210\u5458... }; struct foo *foo_ptr = ...; // \u5047\u8bbe\u5df2\u7ecf\u83b7\u53d6\u5230foo_ptr\u7684\u5730\u5740 int *bar_ptr = &foo_ptr->bar; // \u83b7\u53d6bar\u7684\u5730\u5740 struct foo *foo_struct = container_of(bar_ptr, struct foo, bar); // \u901a\u8fc7bar_ptr\u83b7\u53d6foo_struct\u7684\u5730\u5740","title":"\u91cd\u8981\u7684\u5b8f"},{"location":"macros/#_1","text":"","title":"\u91cd\u8981\u7684\u5b8f"},{"location":"macros/#offsetof","text":"offsetof \u662f\u4e00\u4e2a\u5b8f\uff0c\u901a\u5e38\u5728 C \u548c C++ \u7f16\u7a0b\u4e2d\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\u76f8\u5bf9\u4e8e\u7ed3\u6784\u4f53\u8d77\u59cb\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u5b8f\u5728 \u6216\u8005 \u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002\u5b83\u4e3b\u8981\u7528\u4e8e\u4f4e\u7ea7\u7cfb\u7edf\u7f16\u7a0b\u548c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u901a\u8fc7\u8ba1\u7b97\u5730\u5740\u504f\u79fb\uff0c\u53ef\u4ee5\u66f4\u7075\u6d3b\u5730\u64cd\u4f5c\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u3002 \u8bed\u6cd5 #include <stddef.h> offsetof(type, member) // type: \u7ed3\u6784\u4f53\u7c7b\u578b\u3002 // member: \u9700\u8981\u8ba1\u7b97\u504f\u79fb\u91cf\u7684\u7ed3\u6784\u4f53\u6210\u5458\u7684\u540d\u5b57\u3002","title":"offsetof"},{"location":"macros/#offsetof_1","text":"","title":"offsetof\u7684\u5b9e\u73b0"},{"location":"macros/#offsetgcc","text":"#define offsetof(type, member) ((size_t) &((type *)0)->member) \u8fd9\u4e2a\u5b9a\u4e49\u76f4\u63a5\u901a\u8fc7\u89e3\u5f15\u7528\u7a7a\u6307\u9488\u6765\u8bbf\u95ee\u6210\u5458\u53d8\u91cfm\u7684\u5730\u5740\uff0c\u7136\u540e\u8ba1\u7b97\u504f\u79fb\u91cf\u3002\u7531\u4e8eC\u8bed\u8a00\u5141\u8bb8\u8fd9\u79cd\u64cd\u4f5c\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u5b58\u5728\u6f5c\u5728\u7684\u98ce\u9669\uff0c\u56e0\u4e3a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u662f\u4e0d\u5b89\u5168\u7684\u200c","title":"offset\u5728gcc\u4e0b\u7684\u5b9e\u73b0"},{"location":"macros/#offsetmsvc","text":"#define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))) \u5728ANSI C\u4e2d, &((st )(0))->m\u4e0d\u4f1a\u5bf90(NULL)\u771f\u6b63\u7684\u8fdb\u884c\u89e3\u5f15\u7528, \u800c\u4f1a\u76f4\u63a5\u8fd4\u56dem\u7684\u5730\u5740, \u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5bf9NULL\u89e3\u5f15\u7528\u4f1a\u9020\u6210\u7684\u6bb5\u9519\u8bef. \u800c\u5728c++\u4e2d, \u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u89c4\u5219, \u6240\u4ee5\u5982\u679c\u60f3ANSI C\u8fd9\u6837\u5b9e\u73b0offsetof\u4f1a\u5f15\u8d77\u6bb5\u9519\u8bef. \u4e5f\u77e5\u9053char \u662f\u5404\u79cdtype\u4e2dstandard\u91cc\u552f\u4e00\u4fdd\u8bc1\u8fc7sizeof\u662f1, \u5176\u5b83\u90fd\u662fimplemention dependent. \u4f7f\u7528volatile\u5173\u952e\u5b57\u662f\u4e3a\u4e86\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u6389\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u786e\u4fdd\u5728\u7f16\u8bd1\u65f6\u80fd\u591f\u6b63\u786e\u8ba1\u7b97\u504f\u79fb\u91cf\u200c","title":"offset\u5728msvc\u4e0b\u7684\u5b9e\u73b0"},{"location":"macros/#offsetof_2","text":"\u200c\u4f18\u70b9\u200c\uff1a\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\u51fa\u7ed3\u6784\u4f53\u6210\u5458\u7684\u504f\u79fb\u91cf\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\u548c\u51c6\u786e\u6027\u3002 \u200c\u7f3a\u70b9\u200c\uff1a\u5bf9\u7a7a\u6307\u9488\u7684\u89e3\u5f15\u7528\u5b58\u5728\u4e0d\u5b89\u5168\u56e0\u7d20\uff0c\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002\u5728C++\u4e2d\u76f4\u63a5\u4f7f\u7528\u53ef\u80fd\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002","title":"offsetof\u7684\u4f18\u7f3a\u70b9"},{"location":"macros/#offsetof_3","text":"#include <stddef.h> #ifndef offsetof #define offsetof(type, member) ((size_t) &((type *)0)->member) #endif // \u793a\u4f8b\u4f7f\u7528 struct MyStruct { int a; char b; double c; }; int main() { size_t offset_of_a = offsetof(struct MyStruct, a); size_t offset_of_b = offsetof(struct MyStruct, b); size_t offset_of_c = offsetof(struct MyStruct, c); printf(\"Offset of 'a' is: %zu\\n\", offset_of_a); printf(\"Offset of 'b' is: %zu\\n\", offset_of_b); printf(\"Offset of 'c' is: %zu\\n\", offset_of_c); return 0; }","title":"offsetof\u7684\u4f7f\u7528"},{"location":"macros/#containerof","text":"\u200ccontainer_of\u200c\u662f\u4e00\u4e2a\u5728Linux\u5185\u6838\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u5b8f\u5b9a\u4e49\uff0c\u4e3b\u8981\u7528\u4e8e\u901a\u8fc7\u7ed3\u6784\u4f53\u6210\u5458\u7684\u5730\u5740\u6765\u83b7\u53d6\u8be5\u7ed3\u6784\u4f53\u7684\u5730\u5740\u3002\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a","title":"containerof"},{"location":"macros/#containerof_1","text":"#define container_of(ptr, type, member) ({ \\ void *__mptr = (void *)(ptr); \\ BUILD_BUG_ON_MSG(!__same_type(*(ptr), ((type *)0)->member) && \\ !__same_type(*(ptr), void), \\ \"pointer type mismatch in container_of()\"); \\ ((type *)(__mptr - offsetof(type, member))); \\ }) \u4f7f\u7528\u65b9\u6cd5 container_of\u5b8f\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a ptr\uff1a\u6307\u5411\u7ed3\u6784\u4f53\u6210\u5458\u7684\u6307\u9488\u3002 type\uff1a\u8be5\u6210\u5458\u6240\u5728\u7684\u7ed3\u6784\u4f53\u7684\u7c7b\u578b\u3002 member\uff1a\u7ed3\u6784\u4f53\u4e2d\u6210\u5458\u7684\u540d\u79f0\u3002 \u5b9e\u73b0\u539f\u7406 1. \u200c\u7c7b\u578b\u68c0\u67e5\u200c\uff1a\u9996\u5148\uff0c\u901a\u8fc7__same_type\u5b8f\u68c0\u67e5ptr\u6307\u5411\u7684\u7c7b\u578b\u662f\u5426\u4e0etype\u7c7b\u578b\u5339\u914d\uff0c\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u3002 2. \u200c\u8ba1\u7b97\u504f\u79fb\u91cf\u200c\uff1a\u4f7f\u7528offsetof\u5b8f\u8ba1\u7b97\u6210\u5458member\u5728\u7ed3\u6784\u4f53\u4e2d\u7684\u504f\u79fb\u91cf\u3002 3. \u200c\u6307\u9488\u8f6c\u6362\u200c\uff1a\u6700\u540e\uff0c\u901a\u8fc7\u51cf\u53bb\u504f\u79fb\u91cf\u6765\u8ba1\u7b97\u7ed3\u6784\u4f53\u7684\u5730\u5740\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7c7b\u578b\u3002","title":"containerof\u7684\u5b9e\u73b0"},{"location":"macros/#container_of","text":"\u5047\u8bbe\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53struct foo\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6210\u5458\u53d8\u91cfbar\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f\u7528container_of\uff1a struct foo { int bar; // \u5176\u4ed6\u6210\u5458... }; struct foo *foo_ptr = ...; // \u5047\u8bbe\u5df2\u7ecf\u83b7\u53d6\u5230foo_ptr\u7684\u5730\u5740 int *bar_ptr = &foo_ptr->bar; // \u83b7\u53d6bar\u7684\u5730\u5740 struct foo *foo_struct = container_of(bar_ptr, struct foo, bar); // \u901a\u8fc7bar_ptr\u83b7\u53d6foo_struct\u7684\u5730\u5740","title":"container_of\u7684\u793a\u4f8b"},{"location":"object_oriented/","text":"\u9762\u5411\u5bf9\u8c61 \u5c01\u88c5 \u7ee7\u627f \u591a\u6001","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"object_oriented/#_1","text":"","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"object_oriented/#_2","text":"","title":"\u5c01\u88c5"},{"location":"object_oriented/#_3","text":"","title":"\u7ee7\u627f"},{"location":"object_oriented/#_4","text":"","title":"\u591a\u6001"},{"location":"template/","text":"\u6a21\u677f \u4f7f\u7528\u5b8f\u5b9e\u73b0\u6a21\u677f \u4f7f\u7528\u4e0d\u900f\u660e\u6307\u9488\u5b9e\u73b0\u6a21\u677f \u4ec0\u4e48\u662f\u4e0d\u900f\u660e\u6307\u9488\uff1f \u987e\u540d\u601d\u4e49\uff0c\u4e0d\u900f\u660e\u662f\u6211\u4eec\u770b\u4e0d\u5230\u7684\u3002\u4f8b\u5982\uff0c\u6728\u6750\u662f\u4e0d\u900f\u660e\u7684\u3002\u4e0d\u900f\u660e\u6307\u9488\u662f\u6307\u5411\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9\u5728\u5b9a\u4e49\u4e4b\u65f6\u4e0d\u516c\u5f00\u3002 \u5728\u6cdb\u578b\u7684\u5b9e\u73b0\u91cc\uff0c\u6211\u4eec\u4f7f\u7528void*\u6765\u5b9e\u73b0\u4e0d\u900f\u660e\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u5185\u5b58\uff0c\u800c\u4e0d\u7528\u5173\u5fc3\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u8fd9\u6b63\u662f\u6cdb\u578b\u6240\u9700\u8981\u7684\u3002 \u4fb5\u5165\u5f0f\u5bb9\u5668","title":"\u6a21\u677f\uff08\u6cdb\u578b\uff09"},{"location":"template/#_1","text":"","title":"\u6a21\u677f"},{"location":"template/#_2","text":"","title":"\u4f7f\u7528\u5b8f\u5b9e\u73b0\u6a21\u677f"},{"location":"template/#_3","text":"","title":"\u4f7f\u7528\u4e0d\u900f\u660e\u6307\u9488\u5b9e\u73b0\u6a21\u677f"},{"location":"template/#_4","text":"\u987e\u540d\u601d\u4e49\uff0c\u4e0d\u900f\u660e\u662f\u6211\u4eec\u770b\u4e0d\u5230\u7684\u3002\u4f8b\u5982\uff0c\u6728\u6750\u662f\u4e0d\u900f\u660e\u7684\u3002\u4e0d\u900f\u660e\u6307\u9488\u662f\u6307\u5411\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\uff0c\u8be5\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9\u5728\u5b9a\u4e49\u4e4b\u65f6\u4e0d\u516c\u5f00\u3002 \u5728\u6cdb\u578b\u7684\u5b9e\u73b0\u91cc\uff0c\u6211\u4eec\u4f7f\u7528void*\u6765\u5b9e\u73b0\u4e0d\u900f\u660e\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u5185\u5b58\uff0c\u800c\u4e0d\u7528\u5173\u5fc3\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u8fd9\u6b63\u662f\u6cdb\u578b\u6240\u9700\u8981\u7684\u3002","title":"\u4ec0\u4e48\u662f\u4e0d\u900f\u660e\u6307\u9488\uff1f"},{"location":"template/#_5","text":"","title":"\u4fb5\u5165\u5f0f\u5bb9\u5668"}]}